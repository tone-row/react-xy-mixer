{"ast":null,"code":"// @ts-nocheck\n\n/* eslint-disable */\nconst EPS = 2.2205e-16;\n\nfunction type(X) {\n  if (X == null) return \"undefined\";else if (X.type) return X.type;else {\n    var t = typeof X;\n\n    if (t == \"object\") {\n      if (Array.isArray(X)) {\n        if (isArrayOfNumbers(X)) return \"vector\"; // for array vectors created by hand\n        else return \"Array\";\n      } else if (X.buffer) return \"vector\"; // Float64Array vector\n      else return t;\n    } else return t;\n  }\n}\n\nfunction isArrayOfNumbers(A) {\n  for (var i = 0; i < A.length; i++) if (typeof A[i] != \"number\") return false;\n\n  return true;\n}\n\nfunction mat(elems, rowwise) {\n  var k;\n  var concatWithNumbers = false;\n  var elemtypes = new Array(elems.length);\n\n  for (k = 0; k < elems.length; k++) {\n    elemtypes[k] = type(elems[k]);\n    if (elemtypes[k] == \"number\") concatWithNumbers = true;\n  }\n\n  if (typeof rowwise == \"undefined\") {\n    // check if vector of numbers\n    if (type(elems) == \"vector\") return new Float64Array(elems); // check if 2D Array => toMatrix rowwise\n\n    var rowwise = true;\n\n    for (k = 0; k < elems.length; k++) {\n      if (!Array.isArray(elems[k]) || elemtypes[k] == \"vector\") {\n        rowwise = false;\n        if (elemtypes[k] == \"string\") return elems; // received vector of strings => return it directly\n      }\n    }\n  }\n\n  if (elems.length == 0) {\n    return [];\n  }\n\n  var m = 0;\n  var n = 0;\n  var i;\n  var j;\n\n  if (rowwise) {\n    var res = [];\n\n    for (k = 0; k < elems.length; k++) {\n      switch (elemtypes[k]) {\n        case \"matrix\":\n          res.push(elems[k].val);\n          m += elems[k].m;\n          n = elems[k].n;\n          break;\n\n        case \"vector\":\n          if (concatWithNumbers) {\n            // return a column by concatenating vectors and numbers\n            for (var l = 0; l < elems[k].length; l++) res.push(elems[k][l]);\n\n            n = 1;\n            m += elems[k].length;\n          } else {\n            // vector (auto transposed) as row in a matrix\n            res.push(elems[k]);\n            m += 1;\n            n = elems[k].length;\n          }\n\n          break;\n\n        case \"number\":\n          res.push(elems[k]);\n          m += 1;\n          n = 1;\n          break;\n\n        case \"spvector\":\n          return spmat(elems);\n\n        default:\n          // Array containing not only numbers...\n          // probably calling mat( Array2D ) => return Array2D\n          return elems;\n          break;\n      }\n    }\n\n    if (n == 1) {\n      var M = new Float64Array(res);\n      return M;\n    }\n\n    var M = new Matrix(m, n);\n    var p = 0;\n\n    for (k = 0; k < res.length; k++) {\n      if (res[k].buffer) {\n        M.val.set(res[k], p);\n        p += res[k].length;\n      } else {\n        for (j = 0; j < res[k].length; j++) M.val[p + j] = res[k][j];\n\n        p += res[k].length;\n      }\n    }\n\n    return M;\n  } else {\n    // compute size\n    m = size(elems[0], 1);\n\n    for (k = 0; k < elems.length; k++) {\n      if (elemtypes[k] == \"matrix\") n += elems[k].n;else n++;\n      if (size(elems[k], 1) != m) return \"undefined\";\n    } // Build matrix\n\n\n    var res = new Matrix(m, n);\n    var c;\n\n    for (i = 0; i < m; i++) {\n      c = 0; // col index\n\n      for (k = 0; k < elems.length; k++) {\n        switch (elemtypes[k]) {\n          case \"matrix\":\n            for (j = 0; j < elems[k].n; j++) {\n              res.val[i * n + j + c] = elems[k].val[i * elems[k].n + j];\n            }\n\n            c += elems[k].n;\n            break;\n\n          case \"vector\":\n            //vector\n            res.val[i * n + c] = elems[k][i];\n            c++;\n            break;\n\n          case \"number\":\n            res.val[i * n + c] = elems[k];\n            c++;\n            break;\n\n          default:\n            break;\n        }\n      }\n    }\n\n    return res;\n  }\n}\n\nexport function array2mat(A) {\n  return mat(A, true);\n}\nexport function solve(A, b) {\n  /* Solve the linear system Ax = b\t*/\n  var tA = type(A);\n\n  if (tA == \"vector\" || tA == \"spvector\" || tA == \"matrix\" && A.m == 1) {\n    // One-dimensional least squares problem:\n    var AtA = mul(transpose(A), A);\n    var Atb = mul(transpose(A), b);\n    return Atb / AtA;\n  }\n\n  if (tA == \"spmatrix\") {\n    /*if ( A.m == A.n )\n    return spsolvecg(A, b); // assume A is positive definite\n    else*/\n    return spcgnr(A, b);\n  }\n\n  if (type(b) == \"vector\") {\n    if (A.m == A.n) return solveGaussianElimination(A, b);else return solveWithQRcolumnpivoting(A, b);\n  } else return solveWithQRcolumnpivotingMultipleRHS(A, b); // b is a matrix\n\n}\n\nfunction mul(a, b) {\n  var sa = size(a);\n  var sb = size(b);\n  if (!isScalar(a) && sa[0] == 1 && sa[1] == 1) a = get(a, 0, 0);\n  if (!isScalar(b) && sb[0] == 1 && sb[1] == 1) b = get(b, 0, 0);\n\n  switch (type(a)) {\n    case \"number\":\n      switch (type(b)) {\n        case \"number\":\n          return a * b;\n          break;\n\n        case \"Complex\":\n          return mulComplexReal(b, a);\n          break;\n\n        case \"vector\":\n          return mulScalarVector(a, b);\n          break;\n\n        case \"spvector\":\n          return mulScalarspVector(a, b);\n          break;\n\n        case \"ComplexVector\":\n          return mulScalarComplexVector(a, b);\n          break;\n\n        case \"matrix\":\n          return mulScalarMatrix(a, b);\n          break;\n\n        case \"spmatrix\":\n          return mulScalarspMatrix(a, b);\n          break;\n\n        case \"ComplexMatrix\":\n          return mulScalarComplexMatrix(a, b);\n          break;\n\n        default:\n          return undefined;\n          break;\n      }\n\n      break;\n\n    case \"Complex\":\n      switch (type(b)) {\n        case \"number\":\n          return mulComplexReal(a, b);\n          break;\n\n        case \"Complex\":\n          return mulComplex(a, b);\n          break;\n\n        case \"vector\":\n          return mulComplexVector(a, b);\n          break;\n\n        case \"ComplexVector\":\n          return mulComplexComplexVector(a, b);\n          break;\n\n        case \"spvector\":\n          return mulComplexspVector(a, b);\n          break;\n\n        case \"matrix\":\n          return mulComplexMatrix(a, b);\n          break;\n\n        case \"ComplexMatrix\":\n          return mulComplexComplexMatrix(a, b);\n          break;\n\n        case \"spmatrix\":\n          return mulComplexspMatrix(a, b);\n          break;\n\n        default:\n          return undefined;\n          break;\n      }\n\n      break;\n\n    case \"vector\":\n      switch (type(b)) {\n        case \"number\":\n          return mulScalarVector(b, a);\n          break;\n\n        case \"Complex\":\n          return mulComplexVector(b, a);\n          break;\n\n        case \"vector\":\n          if (a.length != b.length) {\n            error(\"Error in mul(a,b) (dot product): a.length = \" + a.length + \" != \" + b.length + \" = b.length.\");\n            return undefined;\n          }\n\n          return dot(a, b);\n          break;\n\n        case \"spvector\":\n          if (a.length != b.length) {\n            error(\"Error in mul(a,b) (dot product): a.length = \" + a.length + \" != \" + b.length + \" = b.length.\");\n            return undefined;\n          }\n\n          return dotspVectorVector(b, a);\n          break;\n\n        case \"ComplexVector\":\n          if (a.length != b.length) {\n            error(\"Error in mul(a,b) (dot product): a.length = \" + a.length + \" != \" + b.length + \" = b.length.\");\n            return undefined;\n          }\n\n          return dotComplexVectorVector(b, a);\n          break;\n\n        case \"matrix\":\n          if (b.m == 1) return outerprodVectors(a, b.val);else {\n            error(\"Inconsistent dimensions in mul(a,B): size(a) = [\" + sa[0] + \",\" + sa[1] + \"], size(B) = [\" + sb[0] + \",\" + sb[1] + \"]\");\n            return undefined;\n          }\n          break;\n\n        case \"spmatrix\":\n          if (b.m == 1) return outerprodVectors(a, fullMatrix(b).val);else {\n            error(\"Inconsistent dimensions in mul(a,B): size(a) = [\" + sa[0] + \",\" + sa[1] + \"], size(B) = [\" + sb[0] + \",\" + sb[1] + \"]\");\n            return undefined;\n          }\n          break;\n\n        case \"ComplexMatrix\":\n          if (b.m == 1) return transpose(outerprodComplexVectorVector(new ComplexVector(b.re, b.im, true), a, b.val));else {\n            error(\"Inconsistent dimensions in mul(a,B): size(a) = [\" + sa[0] + \",\" + sa[1] + \"], size(B) = [\" + sb[0] + \",\" + sb[1] + \"]\");\n            return undefined;\n          }\n          break;\n\n        default:\n          return undefined;\n          break;\n      }\n\n      break;\n\n    case \"spvector\":\n      switch (type(b)) {\n        case \"number\":\n          return mulScalarspVector(b, a);\n          break;\n\n        case \"vector\":\n          if (a.length != b.length) {\n            error(\"Error in mul(a,b) (dot product): a.length = \" + a.length + \" != \" + b.length + \" = b.length.\");\n            return undefined;\n          }\n\n          return dotspVectorVector(a, b);\n          break;\n\n        case \"spvector\":\n          if (a.length != b.length) {\n            error(\"Error in mul(a,b) (dot product): a.length = \" + a.length + \" != \" + b.length + \" = b.length.\");\n            return undefined;\n          }\n\n          return spdot(b, a);\n          break;\n\n        case \"matrix\":\n          if (b.m == 1) return outerprodspVectorVector(a, b.val);else {\n            error(\"Inconsistent dimensions in mul(a,B): size(a) = [\" + sa[0] + \",\" + sa[1] + \"], size(B) = [\" + sb[0] + \",\" + sb[1] + \"]\");\n            return undefined;\n          }\n          break;\n\n        case \"spmatrix\":\n          if (b.m == 1) return outerprodspVectorVector(a, fullMatrix(b).val);else {\n            error(\"Inconsistent dimensions in mul(a,B): size(a) = [\" + sa[0] + \",\" + sa[1] + \"], size(B) = [\" + sb[0] + \",\" + sb[1] + \"]\");\n            return undefined;\n          }\n          break;\n\n        default:\n          return undefined;\n          break;\n      }\n\n      break;\n\n    case \"ComplexVector\":\n      switch (type(b)) {\n        case \"number\":\n          return mulScalarComplexVector(b, a);\n          break;\n\n        case \"Complex\":\n          return mulComplexComplexVector(b, a);\n          break;\n\n        case \"vector\":\n          if (a.length != b.length) {\n            error(\"Error in mul(a,b) (dot product): a.length = \" + a.length + \" != \" + b.length + \" = b.length.\");\n            return undefined;\n          }\n\n          return dotComplexVectorVector(a, b);\n          break;\n\n        case \"spvector\":\n          if (a.length != b.length) {\n            error(\"Error in mul(a,b) (dot product): a.length = \" + a.length + \" != \" + b.length + \" = b.length.\");\n            return undefined;\n          }\n\n          return dotComplexVectorspVector(a, b);\n          break;\n\n        case \"matrix\":\n          if (b.m == 1) return outerprodComplexVectorVector(a, b.val);else {\n            error(\"Inconsistent dimensions in mul(a,B): size(a) = [\" + sa[0] + \",\" + sa[1] + \"], size(B) = [\" + sb[0] + \",\" + sb[1] + \"]\");\n            return undefined;\n          }\n          break;\n\n        case \"spmatrix\":\n          if (b.m == 1) return outerprodComplexVectorVector(a, fullMatrix(b).val);else {\n            error(\"Inconsistent dimensions in mul(a,B): size(a) = [\" + sa[0] + \",\" + sa[1] + \"], size(B) = [\" + sb[0] + \",\" + sb[1] + \"]\");\n            return undefined;\n          }\n          break;\n\n        case \"ComplexMatrix\":\n          if (b.m == 1) return outerprodComplexVectors(a, new ComplexVector(b.re, b.im, true));else {\n            error(\"Inconsistent dimensions in mul(a,B): size(a) = [\" + sa[0] + \",\" + sa[1] + \"], size(B) = [\" + sb[0] + \",\" + sb[1] + \"]\");\n            return undefined;\n          }\n          break;\n\n        default:\n          return undefined;\n          break;\n      }\n\n      break;\n\n    case \"matrix\":\n      switch (type(b)) {\n        case \"number\":\n          return mulScalarMatrix(b, a);\n          break;\n\n        case \"Complex\":\n          return mulComplexMatrix(b, a);\n          break;\n\n        case \"vector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.val.length != b.length) {\n              error(\"Error in mul(a',b): a.length = \" + a.val.length + \" != \" + b.length + \" =  b.length.\");\n              return undefined;\n            }\n\n            return dot(a.val, b);\n          } else {\n            if (a.n != b.length) {\n              error(\"Error in mul(A,b): A.n = \" + a.n + \" != \" + b.length + \" = b.length.\");\n              return undefined;\n            }\n\n            return mulMatrixVector(a, b);\n          }\n\n          break;\n\n        case \"spvector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.val.length != b.length) {\n              error(\"Error in mul(a',b): a.length = \" + a.val.length + \" != \" + b.length + \" =  b.length.\");\n              return undefined;\n            }\n\n            return dotspVectorVector(b, a.val);\n          } else {\n            if (a.n != b.length) {\n              error(\"Error in mul(A,b): A.n = \" + a.n + \" != \" + b.length + \" = b.length.\");\n              return undefined;\n            }\n\n            return mulMatrixspVector(a, b);\n          }\n\n          break;\n\n        case \"ComplexVector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.val.length != b.length) {\n              error(\"Error in mul(a',b): a.length = \" + a.val.length + \" != \" + b.length + \" =  b.length.\");\n              return undefined;\n            }\n\n            return dotComplexVectorVector(b, a.val);\n          } else {\n            if (a.n != b.length) {\n              error(\"Error in mul(A,b): A.n = \" + a.n + \" != \" + b.length + \" = b.length.\");\n              return undefined;\n            }\n\n            return mulMatrixComplexVector(a, b);\n          }\n\n          break;\n\n        case \"matrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n\n          return mulMatrixMatrix(a, b);\n          break;\n\n        case \"spmatrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n\n          return mulMatrixspMatrix(a, b);\n          break;\n\n        case \"ComplexMatrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n\n          return transpose(mulComplexMatrixMatrix(transpose(b), transpose(a)));\n          break;\n\n        default:\n          return undefined;\n          break;\n      }\n\n      break;\n\n    case \"spmatrix\":\n      switch (type(b)) {\n        case \"number\":\n          return mulScalarspMatrix(b, a);\n          break;\n\n        case \"vector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.n != b.length) {\n              error(\"Error in mul(a',b): a.length = \" + a.val.length + \" != \" + b.length + \" =  b.length.\");\n              return undefined;\n            }\n\n            return dot(fullMatrix(a).val, b);\n          } else {\n            if (a.n != b.length) {\n              error(\"Error in mul(A,b): A.n = \" + a.n + \" != \" + b.length + \" = b.length.\");\n              return undefined;\n            }\n\n            return mulspMatrixVector(a, b);\n          }\n\n          break;\n\n        case \"spvector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.n != b.length) {\n              error(\"Error in mul(a',b): a.length = \" + a.val.length + \" != \" + b.length + \" =  b.length.\");\n              return undefined;\n            }\n\n            return dotspVectorVector(b, fullMatrix(a).val);\n          } else {\n            if (a.n != b.length) {\n              error(\"Error in mul(A,b): A.n = \" + a.n + \" != \" + b.length + \" = b.length.\");\n              return undefined;\n            }\n\n            return mulspMatrixspVector(a, b);\n          }\n\n          break;\n\n        case \"matrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n\n          return mulspMatrixMatrix(a, b);\n          break;\n\n        case \"spmatrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n\n          return mulspMatrixspMatrix(a, b);\n          break;\n\n        default:\n          return undefined;\n          break;\n      }\n\n      break;\n\n    case \"ComplexMatrix\":\n      switch (type(b)) {\n        case \"number\":\n          return mulScalarComplexMatrix(b, a);\n          break;\n\n        case \"Complex\":\n          return mulComplexComplexMatrix(b, a);\n          break;\n\n        case \"vector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.val.length != b.length) {\n              error(\"Error in mul(a',b): a.length = \" + a.val.length + \" != \" + b.length + \" =  b.length.\");\n              return undefined;\n            }\n\n            return dotComplexVectorVector(new ComplexVector(a.re, a.im, true), b);\n          } else {\n            if (a.n != b.length) {\n              error(\"Error in mul(A,b): A.n = \" + a.n + \" != \" + b.length + \" = b.length.\");\n              return undefined;\n            }\n\n            return mulComplexMatrixVector(a, b);\n          }\n\n          break;\n\n        case \"spvector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.val.length != b.length) {\n              error(\"Error in mul(a',b): a.length = \" + a.val.length + \" != \" + b.length + \" =  b.length.\");\n              return undefined;\n            }\n\n            return dotComplexVectorspVector(new ComplexVector(a.re, a.im, true), b);\n          } else {\n            if (a.n != b.length) {\n              error(\"Error in mul(A,b): A.n = \" + a.n + \" != \" + b.length + \" = b.length.\");\n              return undefined;\n            }\n\n            return mulComplexMatrixspVector(a, b);\n          }\n\n          break;\n\n        case \"ComplexVector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.val.length != b.length) {\n              error(\"Error in mul(a',b): a.length = \" + a.val.length + \" != \" + b.length + \" =  b.length.\");\n              return undefined;\n            }\n\n            return dotComplexVectors(new ComplexVector(a.re, a.im, true), b);\n          } else {\n            if (a.n != b.length) {\n              error(\"Error in mul(A,b): A.n = \" + a.n + \" != \" + b.length + \" = b.length.\");\n              return undefined;\n            }\n\n            return mulComplexMatrixComplexVector(a, b);\n          }\n\n          break;\n\n        case \"matrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n\n          return mulComplexMatrixMatrix(a, b);\n          break;\n\n        case \"spmatrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n\n          return mulComplexMatrixspMatrix(a, b);\n          break;\n\n        case \"ComplexMatrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n\n          return mulComplexMatrices(a, b);\n          break;\n\n        default:\n          return undefined;\n          break;\n      }\n\n      break;\n\n    default:\n      return undefined;\n      break;\n  }\n}\n\nfunction transpose(A) {\n  var i;\n  var j;\n\n  switch (type(A)) {\n    case \"number\":\n      return A;\n      break;\n\n    case \"vector\":\n      var res = new Matrix(1, A.length, A);\n      return res; // matrix with a single row\n\n      break;\n\n    case \"spvector\":\n      return transposespVector(A);\n      break;\n\n    case \"ComplexVector\":\n      var res = new ComplexMatrix(1, A.length, conj(A));\n      return res; // matrix with a single row\n\n      break;\n\n    case \"matrix\":\n      return transposeMatrix(A);\n      break;\n\n    case \"spmatrix\":\n      return transposespMatrix(A);\n      break;\n\n    case \"ComplexMatrix\":\n      return transposeComplexMatrix(A);\n      break;\n\n    default:\n      return undefined;\n      break;\n  }\n}\n\nfunction Matrix(m, n, values) {\n  /** @const */\n  this.length = m;\n  /** @const */\n\n  this.m = m;\n  /** @const */\n\n  this.n = n;\n  /** @const */\n\n  this.size = [m, n];\n  /** @const */\n\n  this.type = \"matrix\";\n  if (arguments.length == 2) this.val = new Float64Array(m * n); // simple m x n zeros\n  else if (arguments.length == 3) this.val = new Float64Array(values); // m x n filled with values with copy\n    else if (arguments.length == 4) this.val = values; // m x n filled with values without copy\n}\n\n_c = Matrix;\n\nfunction size(A, sizealongdimension) {\n  var s;\n\n  switch (type(A)) {\n    case \"string\":\n    case \"boolean\":\n    case \"number\":\n    case \"Complex\":\n      s = [1, 1];\n      break;\n\n    case \"vector\":\n    case \"spvector\":\n    case \"ComplexVector\":\n      s = [A.length, 1];\n      break;\n\n    case \"matrix\":\n    case \"spmatrix\":\n    case \"ComplexMatrix\":\n      s = A.size;\n      break;\n\n    case \"object\":\n      s = [1, 1];\n      break;\n\n    default:\n      s = [1, 1]; //error( \"Cannot determine size of object\" );\n\n      break;\n  }\n\n  if (typeof sizealongdimension == \"undefined\") return s;else return s[sizealongdimension - 1];\n}\n\nfunction isScalar(x) {\n  switch (typeof x) {\n    case \"string\":\n    case \"number\":\n    case \"boolean\":\n      return true;\n      break;\n\n    default:\n      if (type(x) == \"Complex\") return true;else return false;\n      break;\n  }\n}\n\nfunction dot(a, b) {\n  const n = a.length;\n  var i;\n  var res = 0;\n\n  for (i = 0; i < n; i++) res += a[i] * b[i];\n\n  return res;\n}\n\nfunction error(msg) {\n  throw new Error(msg); //\tpostMessage( {\"error\": msg} );\n}\n\nfunction solveWithQRcolumnpivoting(A, b) {\n  var m;\n  var n;\n  var R;\n  var V;\n  var beta;\n  var r;\n  var piv;\n\n  if (type(A) == \"matrix\") {\n    // Compute the QR factorization\n    m = A.m;\n    n = A.n;\n    var QRfact = qr(A);\n    R = QRfact.R;\n    V = QRfact.V;\n    beta = QRfact.beta;\n    r = QRfact.rank;\n    piv = QRfact.piv;\n  } else {\n    // we get the QR factorization in A\n    R = A.R;\n    r = A.rank;\n    V = A.V;\n    beta = A.beta;\n    piv = A.piv;\n    m = R.m;\n    n = R.n;\n  }\n\n  var btmp = vectorCopy(b);\n  var j;\n  var i;\n  var k;\n  var smallb; // b = Q' * b\n\n  for (j = 0; j < r; j++) {\n    // b(j:m) = (I - beta v v^T ) * b(j:m)\n    smallb = get(btmp, range(j, m));\n    set(btmp, range(j, m), sub(smallb, mul(beta[j] * mul(V[j], smallb), V[j])));\n  } // Solve R x = b with backsubstitution\n\n\n  var x = zeros(n);\n\n  if (r > 1) {\n    set(x, range(0, r), backsubstitution(R, get(btmp, range(r)))); // note: if m < n, backsubstitution only uses n columns of R.\n  } else {\n    x[0] = btmp[0] / R.val[0];\n  } // and apply permutations\n\n\n  for (j = r - 1; j >= 0; j--) {\n    if (piv[j] != j) {\n      var tmp = x[j];\n      x[j] = x[piv[j]];\n      x[piv[j]] = tmp;\n    }\n  }\n\n  return x;\n}\n\nfunction qr(A, compute_Q) {\n  // QR factorization with column pivoting AP = QR based on Householder reflections\n  // A with m rows and n cols; m >= n (well, it also works with m < n)\n  // piv = vector of permutations : P = P_rank with P_j = identity with swaprows ( j, piv(j) )\n  // Implemented with R transposed for faster computations on rows instead of columns\n\n  /* TEST\n  A  = [[12,-51,4],[6,167,-68],[-4,24,-41]]\n  QR = qr(A)\n  QR.R\n  \t\n  */\n  const m = A.m;\n  const n = A.n;\n  /*\n  if ( n > m)\n  return \"QR factorization unavailable for n > m.\";\n  */\n\n  var i;\n  var j;\n  var householder;\n  var R = transpose(A); // transposed for faster implementation\n\n  var Q;\n  var V = []; // store householder vectors in this list (not a matrix)\n\n  var beta = zeros(n);\n  var piv = zeros(n);\n  var smallR;\n  var r = -1; // rank estimate -1\n\n  var normA = norm(A);\n  var normR22 = normA;\n  var Rij;\n  const TOL = 1e-5;\n  var TOLnormR22square = TOL * normA;\n  TOLnormR22square *= TOLnormR22square;\n  var tau = 0;\n  var k = 0;\n  var c = zeros(n);\n\n  for (j = 0; j < n; j++) {\n    var Rj = R.val.subarray(j * R.n, j * R.n + R.n);\n    c[j] = dot(Rj, Rj);\n\n    if (c[j] > tau) {\n      tau = c[j];\n      k = j;\n    }\n  }\n\n  var updateR = function (r, v, beta) {\n    // set ( R, range(r,n), range(r,m) , subMatrices (  smallR , outerprodVectors( mulMatrixVector( smallR, householder.v), householder.v,  householder.beta ) ) ) ;\n    // most of the time is spent here...\n    var i, j, l;\n    var m_r = m - r;\n\n    for (i = r; i < n; i++) {\n      var smallRiv = 0;\n      var Ri = i * m + r; // =  i * R.n + r\n\n      var Rval = R.val.subarray(Ri, Ri + m_r);\n\n      for (l = 0; l < m_r; l++) smallRiv += Rval[l] * v[l]; //smallRiv += R.val[Ri + l] * v[l];\n\n\n      smallRiv *= beta;\n\n      for (j = 0; j < m_r; j++) {\n        Rval[j] -= smallRiv * v[j]; // R.val[Ri + j] -= smallRiv * v[j];\n      }\n    }\n  }; // Update c\n\n\n  var updateC = function (r) {\n    var j;\n\n    for (j = r + 1; j < n; j++) {\n      var Rjr = R.val[j * m + r];\n      c[j] -= Rjr * Rjr;\n    } // tau, k = max ( c[r+1 : n] )\n\n\n    k = r + 1;\n    tau = c[r + 1];\n\n    for (j = r + 2; j < n; j++) {\n      if (c[j] > tau) {\n        tau = c[j];\n        k = j;\n      }\n    }\n  }; // Compute norm of residuals\n\n\n  var computeNormR22 = function (r) {\n    //normR22 = norm(get ( R, range(r+1,n), range(r+1,m), ) );\n    var normR22 = 0;\n    var i = r + 1;\n    var ri = i * m;\n    var j;\n\n    while (i < n && normR22 <= TOLnormR22square) {\n      for (j = r + 1; j < m; j++) {\n        var Rij = R.val[ri + j];\n        normR22 += Rij * Rij;\n      }\n\n      i++;\n      ri += m;\n    }\n\n    return normR22;\n  };\n\n  while (tau > EPS && r < n - 1 && normR22 > TOLnormR22square) {\n    r++;\n    piv[r] = k;\n    swaprows(R, r, k);\n    c[k] = c[r];\n    c[r] = tau;\n\n    if (r < m - 1) {\n      householder = house(R.val.subarray(r * R.n + r, r * R.n + m)); // house only reads vec so subarray is ok\n    } else {\n      householder.v = [1];\n      householder.beta = 0; //smallR = R[m-1][m-1];\n    }\n\n    if (r < n - 1) {\n      // smallR is a matrix\n      updateR(r, householder.v, householder.beta);\n    } else {\n      // smallR is a row vector (or a number if m=n):\n      if (r < m - 1) {\n        updateR(r, householder.v, householder.beta);\n        /*\n        var r_to_m = range(r,m);\n        smallR = get(R, r, r_to_m);\n        set ( R, r , r_to_m, sub (  smallR , transpose(mul( householder.beta * mul( smallR, householder.v) ,householder.v  ) )) ) ;*/\n      } else {//var smallRnumber = R.val[(m-1)*R.n + m-1]; // beta is zero, so no update\n          //set ( R, r , r, sub (  smallRnumber , transpose(mul( householder.beta * mul( smallRnumber, householder.v) ,householder.v  ) )) ) ;\n        }\n    } // Store householder vectors and beta\n\n\n    V[r] = vectorCopy(householder.v);\n    beta[r] = householder.beta;\n\n    if (r < n - 1) {\n      // Update c\n      updateC(r); // stopping criterion for rank estimation\n\n      if (r < m - 1) normR22 = computeNormR22(r);else normR22 = 0;\n    }\n  }\n\n  if (compute_Q) {\n    Q = eye(m);\n    var smallQ;\n    var nmax = r;\n    if (m > r + 1) nmax = r - 1;\n\n    for (j = nmax; j >= 0; j--) {\n      if (j == m - 1) {\n        Q.val[j * m + j] -= beta[j] * V[j][0] * V[j][0] * Q.val[j * m + j];\n      } else {\n        var j_to_m = range(j, m);\n        smallQ = get(Q, j_to_m, j_to_m); // matrix\n\n        set(Q, j_to_m, j_to_m, subMatrices(smallQ, outerprodVectors(V[j], mulMatrixVector(transposeMatrix(smallQ), V[j]), beta[j])));\n      }\n    }\n  }\n\n  return {\n    Q: Q,\n    R: transpose(R),\n    V: V,\n    beta: beta,\n    piv: piv,\n    rank: r + 1\n  };\n}\n\nfunction transposeMatrix(A) {\n  var i;\n  var j;\n  const m = A.m;\n  const n = A.n;\n\n  if (m > 1) {\n    var res = zeros(n, m);\n    var Aj = 0;\n\n    for (j = 0; j < m; j++) {\n      var ri = 0;\n\n      for (i = 0; i < n; i++) {\n        res.val[ri + j] = A.val[Aj + i];\n        ri += m;\n      }\n\n      Aj += n;\n    }\n\n    return res;\n  } else {\n    return A.val;\n  }\n}\n\nfunction zeros(rows, cols) {\n  // Create a matrix or vector of ZERO\n  if (arguments.length == 1 || cols == 1) {\n    return new Float64Array(rows);\n  } else {\n    return new Matrix(rows, cols);\n  }\n}\n\nfunction norm(A, sumalongdimension) {\n  // l2-norm (Euclidean norm) of vectors or Frobenius norm of matrix\n  var i;\n  var j;\n\n  switch (type(A)) {\n    case \"number\":\n      return Math.abs(A);\n      break;\n\n    case \"vector\":\n      if (arguments.length == 1 || sumalongdimension == 1) {\n        return Math.sqrt(dot(A, A));\n      } else return abs(A);\n\n      break;\n\n    case \"spvector\":\n      if (arguments.length == 1 || sumalongdimension == 1) {\n        return Math.sqrt(dot(A.val, A.val));\n      } else return abs(A);\n\n      break;\n\n    case \"matrix\":\n      if (arguments.length == 1) {\n        return Math.sqrt(dot(A.val, A.val));\n      } else if (sumalongdimension == 1) {\n        // norm of columns, result is row vector\n        const n = A.n;\n        var res = zeros(1, n);\n        var r = 0;\n\n        for (i = 0; i < A.m; i++) {\n          for (j = 0; j < n; j++) res.val[j] += A.val[r + j] * A.val[r + j];\n\n          r += n;\n        }\n\n        for (j = 0; j < n; j++) res.val[j] = Math.sqrt(res.val[j]);\n\n        return res;\n      } else if (sumalongdimension == 2) {\n        // norm of rows, result is column vector\n        var res = zeros(A.m);\n        var r = 0;\n\n        for (i = 0; i < A.m; i++) {\n          for (j = 0; j < A.n; j++) res[i] += A.val[r + j] * A.val[r + j];\n\n          r += A.n;\n          res[i] = Math.sqrt(res[i]);\n        }\n\n        return res;\n      } else return \"undefined\";\n\n      break;\n\n    case \"spmatrix\":\n      if (arguments.length == 1) {\n        return Math.sqrt(dot(A.val, A.val));\n      } else if (sumalongdimension == 1 && !A.rowmajor) {\n        // norm of columns, result is row vector\n        const nn = A.n;\n        var res = zeros(1, nn);\n\n        for (j = 0; j < nn; j++) {\n          var s = A.cols[j];\n          var e = A.cols[j + 1];\n\n          for (var k = s; k < e; k++) res.val[j] += A.val[k] * A.val[k];\n\n          res.val[j] = Math.sqrt(res.val[j]);\n        }\n\n        return res;\n      } else if (sumalongdimension == 2 && A.rowmajor) {\n        // norm of rows, result is column vector\n        var res = zeros(A.m);\n\n        for (i = 0; i < A.m; i++) {\n          var s = A.rows[i];\n          var e = A.rows[i + 1];\n\n          for (var k = s; k < e; k++) res[i] += A.val[k] * A.val[k];\n\n          res[i] = Math.sqrt(res[i]);\n        }\n\n        return res;\n      } else return \"undefined\";\n\n      break;\n\n    default:\n      return \"undefined\";\n  }\n}\n\nfunction swaprows(A, i, j) {\n  if (i != j) {\n    var ri = i * A.n;\n    var rj = j * A.n;\n    var tmp = vectorCopy(A.val.subarray(ri, ri + A.n));\n    A.val.set(vectorCopy(A.val.subarray(rj, rj + A.n)), ri);\n    A.val.set(tmp, rj);\n  }\n}\n\nfunction vectorCopy(a) {\n  return new Float64Array(a);\n}\n\nfunction house(x) {\n  // Compute Houselholder vector v such that\n  // P = (I - beta v v') is orthogonal and Px = ||x|| e_1\n  const n = x.length;\n  var i;\n  var mu;\n  var beta;\n  var v = zeros(n);\n  var v0;\n  var sigma;\n  var x0 = x[0];\n  var xx = dot(x, x); // sigma = x(2:n)^T x(2:n)\n\n  sigma = xx - x0 * x0;\n\n  if (isZero(sigma)) {\n    // x(2:n) is zero =>  v=[1,0...0], beta = 0\n    beta = 0;\n    v[0] = 1;\n  } else {\n    mu = Math.sqrt(xx); // norm(x) ; //Math.sqrt( x0*x0 + sigma );\n\n    if (x0 < EPS) {\n      v0 = x0 - mu;\n    } else {\n      v0 = -sigma / (x0 + mu);\n    }\n\n    beta = 2 * v0 * v0 / (sigma + v0 * v0); // v = [v0,x(2:n)] / v0\n\n    v[0] = 1;\n\n    for (i = 1; i < n; i++) v[i] = x[i] / v0;\n  }\n\n  return {\n    v: v,\n    beta: beta\n  };\n}\n\nfunction isZero(x) {\n  return Math.abs(x) < EPS;\n}\n\nfunction get(A, rowsrange, colsrange) {\n  var typerows = typeof rowsrange;\n  var typecols = typeof colsrange;\n  if (arguments.length == 1) return matrixCopy(A);\n  var typeA = type(A);\n\n  if (typeA == \"vector\") {\n    if (typerows == \"number\") {\n      if (rowsrange >= 0 && rowsrange < A.length) return A[rowsrange]; // get v[i]\n      else {\n          error(\"Error in a[i] = get(a,i): Index i=\" + rowsrange + \" out of bounds [0,\" + (A.length - 1) + \"]\");\n          return undefined;\n        }\n    } else {\n      return getSubVector(A, rowsrange);\n    }\n  } else if (typeA == \"matrix\") {\n    if (typerows == \"number\") rowsrange = [rowsrange];\n    if (typecols == \"number\") colsrange = [colsrange];\n    if (rowsrange.length == 1 && colsrange.length == 1) return A.val[rowsrange[0] * A.n + colsrange[0]]; // get ( A, i, j)\n\n    if (rowsrange.length == 0) return getCols(A, colsrange); // get(A,[],4) <=> cols(A,4)\n\n    if (colsrange.length == 0) return getRows(A, rowsrange); // get(A,3,[]) <=> rows(A,3)\n    // otherwise:\n\n    return getSubMatrix(A, rowsrange, colsrange);\n  } else if (typeA == \"Array\") {\n    if (typerows == \"number\") return A[rowsrange];else return getSubArray(A, rowsrange);\n  } else if (typeA == \"spmatrix\") {\n    if (typerows == \"number\") rowsrange = [rowsrange];\n    if (typecols == \"number\") colsrange = [colsrange];\n    if (rowsrange.length == 1 && colsrange.length == 1) return A.get(rowsrange[0], colsrange[0]); // get ( A, i, j)\n\n    if (rowsrange.length == 1 && A.rowmajor) return A.row(rowsrange[0]);\n    if (colsrange.length == 1 && !A.rowmajor) return A.col(colsrange[0]);\n    if (colsrange.length == 0) return spgetRows(A, rowsrange);\n    if (rowsrange.length == 0) return spgetCols(A, colsrange); // TODO\n  } else if (typeA == \"spvector\") {\n    if (typerows == \"number\") return A.get(rowsrange); // get v[i]\n    else return getSubspVector(A, rowsrange); //TODO\n  } else if (typeA == \"ComplexVector\") {\n    if (typerows == \"number\") return A.get(rowsrange); // get v[i]\n    else return A.getSubVector(rowsrange);\n  } else if (typeA == \"ComplexMatrix\") {\n    if (typerows == \"number\") rowsrange = [rowsrange];\n    if (typecols == \"number\") colsrange = [colsrange];\n    if (rowsrange.length == 1 && colsrange.length == 1) return A.get(i, j);\n    if (rowsrange.length == 0) return A.getCols(colsrange); // get(A,[],4) <=> cols(A,4)\n\n    if (colsrange.length == 0) return A.getRows(rowsrange); // get(A,3,[]) <=> rows(A,3)\n    // otherwise:\n\n    return A.getSubMatrix(rowsrange, colsrange);\n  }\n\n  return undefined;\n}\n\nfunction range(start, end, inc) {\n  // python-like range function\n  // returns [0,... , end-1]\n  if (typeof start == \"undefined\") return [];\n  if (typeof inc == \"undefined\") var inc = 1;\n\n  if (typeof end == \"undefined\") {\n    var end = start;\n    start = 0;\n  }\n\n  if (start == end - inc) {\n    return start;\n  } else if (start == end) {\n    return [];\n  } else if (start > end) {\n    if (inc > 0) inc *= -1;\n    var r = new Array(Math.floor((start - end) / Math.abs(inc)));\n    var k = 0;\n\n    for (var i = start; i > end; i += inc) {\n      r[k] = i;\n      k++;\n    }\n  } else {\n    var r = new Array(Math.floor((end - start) / inc));\n    var k = 0;\n\n    for (var i = start; i < end; i += inc) {\n      r[k] = i;\n      k++;\n    }\n  }\n\n  return r;\n}\n\nfunction getSubVector(a, rowsrange) {\n  const n = rowsrange.length;\n  var res = new Float64Array(n);\n\n  for (var i = 0; i < n; i++) {\n    res[i] = a[rowsrange[i]];\n  }\n\n  return res;\n}\n\nfunction set(A, rowsrange, colsrange, B) {\n  var i;\n  var j;\n  var k;\n  var l;\n  var n;\n  var typerows = typeof rowsrange;\n  var typecols = typeof colsrange;\n  if (arguments.length == 1) return undefined;\n  var typeA = type(A);\n\n  if (typeA == \"vector\") {\n    B = colsrange;\n\n    if (typerows == \"number\") {\n      A[rowsrange] = B;\n      return B;\n    } else if (rowsrange.length == 0) rowsrange = range(A.length);\n\n    if (size(B, 1) == 1) {\n      setVectorScalar(A, rowsrange, B);\n    } else {\n      setVectorVector(A, rowsrange, B);\n    }\n\n    return B;\n  } else if (typeA == \"matrix\") {\n    if (typerows == \"number\") rowsrange = [rowsrange];\n    if (typecols == \"number\") colsrange = [colsrange];\n\n    if (rowsrange.length == 1 && colsrange.length == 1) {\n      A.val[rowsrange[0] * A.n + colsrange[0]] = B;\n      return B;\n    }\n\n    if (rowsrange.length == 0) {\n      setCols(A, colsrange, B);\n      return B;\n    }\n\n    if (colsrange.length == 0) {\n      setRows(A, rowsrange, B);\n      return B;\n    } // Set a submatrix\n\n\n    var sB = size(B);\n    var tB = type(B);\n\n    if (sB[0] == 1 && sB[1] == 1) {\n      if (tB == \"number\") setMatrixScalar(A, rowsrange, colsrange, B);else if (tB == \"vector\") setMatrixScalar(A, rowsrange, colsrange, B[0]);else setMatrixScalar(A, rowsrange, colsrange, B.val[0]);\n    } else {\n      if (colsrange.length == 1) setMatrixColVector(A, rowsrange, colsrange[0], B);else if (rowsrange.length == 1) {\n        if (tB == \"vector\") setMatrixRowVector(A, rowsrange[0], colsrange, B);else setMatrixRowVector(A, rowsrange[0], colsrange, B.val);\n      } else setMatrixMatrix(A, rowsrange, colsrange, B);\n    }\n\n    return B;\n  } else if (typeA == \"ComplexVector\") {\n    B = colsrange;\n\n    if (typerows == \"number\") {\n      A.set(rowsrange, B);\n      return B;\n    } else if (rowsrange.length == 0) rowsrange = range(A.length);\n\n    if (size(B, 1) == 1) {\n      A.setVectorScalar(rowsrange, B);\n    } else {\n      A.setVectorVector(rowsrange, B);\n    }\n\n    return B;\n  }\n}\n\nexport function sub(a, b) {\n  const ta = type(a);\n  const tb = type(b);\n  if (ta == \"number\" && tb == \"number\") return a - b;else if (ta == \"number\") {\n    switch (tb) {\n      case \"Complex\":\n        return addComplexReal(minusComplex(b), a);\n        break;\n\n      case \"vector\":\n        return subScalarVector(a, b);\n        break;\n\n      case \"matrix\":\n        return subScalarMatrix(a, b);\n        break;\n\n      case \"spvector\":\n        return subScalarspVector(a, b);\n        break;\n\n      case \"spmatrix\":\n        return subScalarspMatrix(a, b);\n        break;\n\n      default:\n        return undefined;\n        break;\n    }\n  } else if (tb == \"number\") {\n    switch (ta) {\n      case \"Complex\":\n        return addComplexReal(b, -a);\n        break;\n\n      case \"vector\":\n        return subVectorScalar(a, b);\n        break;\n\n      case \"matrix\":\n        return subMatrixScalar(a, b);\n        break;\n\n      case \"spvector\":\n        return addScalarspVector(-b, a);\n        break;\n\n      case \"spmatrix\":\n        return addScalarspMatrix(-b, a);\n        break;\n\n      default:\n        return undefined;\n        break;\n    }\n  } else if (ta == \"vector\") {\n    switch (tb) {\n      case \"vector\":\n        // vector substraction\n        if (a.length != b.length) {\n          error(\"Error in sub(a,b): a.length = \" + a.length + \" != \" + b.length + \" = b.length.\");\n          return undefined;\n        }\n\n        return subVectors(a, b);\n        break;\n\n      case \"spvector\":\n        // vector substraction\n        if (a.length != b.length) {\n          error(\"Error in sub(a,b): a.length = \" + a.length + \" != \" + b.length + \" = b.length.\");\n          return undefined;\n        }\n\n        return subVectorspVector(a, b);\n        break;\n\n      case \"matrix\":\n      case \"spmatrix\":\n      default:\n        error(\"Error in sub(a,B): a is a vector and B is a \" + tb + \".\");\n        return undefined;\n        break;\n    }\n  } else if (ta == \"matrix\") {\n    switch (tb) {\n      case \"matrix\":\n        // Matrix sub\n        if (a.m != b.m || a.n != b.n) {\n          error(\"Error in sub(A,B): size(A) = [\" + a.m + \",\" + a.n + \"] != [\" + b.m + \",\" + b.n + \"] = size(B).\");\n          return undefined;\n        }\n\n        return subMatrices(a, b);\n        break;\n\n      case \"spmatrix\":\n        // Matrix addition\n        if (a.m != b.m || a.n != b.n) {\n          error(\"Error in sub(A,B): size(A) = [\" + a.m + \",\" + a.n + \"] != [\" + b.m + \",\" + b.n + \"] = size(B).\");\n          return undefined;\n        }\n\n        return subMatrixspMatrix(a, b);\n        break;\n\n      case \"vector\":\n      case \"spvector\":\n      default:\n        error(\"Error in sub(A,b): A is a matrix and b is a \" + tb + \".\");\n        return undefined;\n        break;\n    }\n  } else if (ta == \"spvector\") {\n    switch (tb) {\n      case \"vector\":\n        if (a.length != b.length) {\n          error(\"Error in sub(a,b): a.length = \" + a.length + \" != \" + b.length + \" = b.length.\");\n          return undefined;\n        }\n\n        return subspVectorVector(a, b);\n        break;\n\n      case \"spvector\":\n        if (a.length != b.length) {\n          error(\"Error in sub(a,b): a.length = \" + a.length + \" != \" + b.length + \" = b.length.\");\n          return undefined;\n        }\n\n        return subspVectors(a, b);\n        break;\n\n      case \"matrix\":\n      case \"spmatrix\":\n      default:\n        error(\"Error in sub(a,B): a is a sparse vector and B is a \" + tb + \".\");\n        return undefined;\n        break;\n    }\n  } else if (ta == \"spmatrix\") {\n    switch (tb) {\n      case \"matrix\":\n        if (a.m != b.m || a.n != b.n) {\n          error(\"Error in sub(A,B): size(A) = [\" + a.m + \",\" + a.n + \"] != [\" + b.m + \",\" + b.n + \"] = size(B).\");\n          return undefined;\n        }\n\n        return subspMatrixMatrix(a, b);\n        break;\n\n      case \"spmatrix\":\n        if (a.m != b.m || a.n != b.n) {\n          error(\"Error in sub(A,B): size(A) = [\" + a.m + \",\" + a.n + \"] != [\" + b.m + \",\" + b.n + \"] = size(B).\");\n          return undefined;\n        }\n\n        return subspMatrices(a, b);\n        break;\n\n      case \"vector\":\n      case \"spvector\":\n      default:\n        error(\"Error in sub(A,b): a is a sparse matrix and B is a \" + tb + \".\");\n        return undefined;\n        break;\n    }\n  } else return undefined;\n}\n\nfunction mulScalarVector(scalar, vec) {\n  var i;\n  const n = vec.length;\n  var res = new Float64Array(vec);\n\n  for (i = 0; i < n; i++) res[i] *= scalar;\n\n  return res;\n}\n\nfunction subVectors(a, b) {\n  const n = a.length;\n  var c = new Float64Array(a);\n\n  for (var i = 0; i < n; i++) c[i] -= b[i];\n\n  return c;\n}\n\nfunction setVectorVector(A, rowsrange, B) {\n  var i;\n\n  for (i = 0; i < rowsrange.length; i++) A[rowsrange[i]] = B[i];\n}\n\nexport function min(a, b) {\n  var ta = type(a);\n\n  if (arguments.length == 1) {\n    switch (ta) {\n      case \"vector\":\n        return minVector(a);\n        break;\n\n      case \"spvector\":\n        var m = minVector(a.val);\n        if (m > 0 && a.val.length < a.length) return 0;else return m;\n        break;\n\n      case \"matrix\":\n        return minMatrix(a);\n        break;\n\n      case \"spmatrix\":\n        var m = minVector(a.val);\n        if (m > 0 && a.val.length < a.m * a.n) return 0;else return m;\n        break;\n\n      default:\n        return a;\n        break;\n    }\n  }\n\n  var tb = type(b);\n\n  if (ta == \"spvector\") {\n    a = fullVector(a);\n    ta = \"vector\";\n  }\n\n  if (ta == \"spmatrix\") {\n    a = fullMatrix(a);\n    ta = \"matrix\";\n  }\n\n  if (tb == \"spvector\") {\n    b = fullVector(b);\n    tb = \"vector\";\n  }\n\n  if (tb == \"spmatrix\") {\n    b = fullMatrix(b);\n    tb = \"matrix\";\n  }\n\n  if (ta == \"number\" && tb == \"number\") return Math.min(a, b);else if (ta == \"number\") {\n    if (tb == \"vector\") return minVectorScalar(b, a);else return minMatrixScalar(b, a);\n  } else if (tb == \"number\") {\n    if (ta == \"vector\") return minVectorScalar(a, b);else {\n      // MAtrix , scalar\n      if (b == 1) return minMatrixRows(a); // return row vector of min of columns\n      else if (b == 2) return minMatrixCols(a); // return column vector of min of rows\n        else return minMatrixScalar(a, b);\n    }\n  } else if (ta == \"vector\") {\n    if (tb == \"vector\") return minVectorVector(a, b);else return \"undefined\";\n  } else {\n    if (tb == \"matrix\") return minMatrixMatrix(a, b);else return \"undefined\";\n  }\n}\n\nfunction minVector(a) {\n  const n = a.length;\n  var res = a[0];\n\n  for (var i = 1; i < n; i++) {\n    if (a[i] < res) res = a[i];\n  }\n\n  return res;\n}\n\nfunction subVectorScalar(vec, scalar) {\n  const n = vec.length;\n  var res = new Float64Array(vec);\n\n  for (var i = 0; i < n; i++) res[i] -= scalar;\n\n  return res;\n}\n\nexport function entrywisediv(a, b) {\n  var ta = type(a);\n  var tb = type(b);\n\n  switch (ta) {\n    case \"number\":\n      switch (tb) {\n        case \"number\":\n          return a / b;\n          break;\n\n        case \"vector\":\n          return divScalarVector(a, b);\n          break;\n\n        case \"matrix\":\n          return divScalarMatrix(a, b);\n          break;\n\n        case \"spvector\":\n          return divScalarspVector(a, b);\n          break;\n\n        case \"spmatrix\":\n          return divScalarspMatrix(a, b);\n          break;\n\n        default:\n          error(\"Error in entrywisediv(a,b): b must be a number, a vector or a matrix.\");\n          return undefined;\n      }\n\n      break;\n\n    case \"vector\":\n      switch (tb) {\n        case \"number\":\n          return divVectorScalar(a, b);\n          break;\n\n        case \"vector\":\n          if (a.length != b.length) {\n            error(\"Error in entrywisediv(a,b): a.length = \" + a.length + \" != \" + b.length + \" = b.length.\");\n            return undefined;\n          }\n\n          return divVectors(a, b);\n          break;\n\n        case \"spvector\":\n          error(\"Error in entrywisediv(a,b): b is a sparse vector with zeros.\");\n          break;\n\n        default:\n          error(\"Error in entrywisediv(a,B): a is a vector and B is a \" + tb + \".\");\n          return undefined;\n      }\n\n      break;\n\n    case \"spvector\":\n      switch (tb) {\n        case \"number\":\n          return mulScalarspVector(1 / b, a);\n          break;\n\n        case \"vector\":\n          if (a.length != b.length) {\n            error(\"Error in entrywisediv(a,b): a.length = \" + a.length + \" != \" + b.length + \" = b.length.\");\n            return undefined;\n          }\n\n          return divVectorspVector(a, b);\n          break;\n\n        case \"spvector\":\n          error(\"Error in entrywisediv(a,b): b is a sparse vector with zeros.\");\n          return undefined;\n          break;\n\n        default:\n          error(\"Error in entrywisediv(a,B): a is a vector and B is a \" + tb + \".\");\n          return undefined;\n      }\n\n      break;\n\n    case \"matrix\":\n      switch (tb) {\n        case \"number\":\n          return divMatrixScalar(a, b);\n          break;\n\n        case \"matrix\":\n          if (a.m != b.m || a.n != b.n) {\n            error(\"Error in entrywisediv(A,B): size(A) = [\" + a.m + \",\" + a.n + \"] != [\" + b.m + \",\" + b.n + \"] = size(B).\");\n            return undefined;\n          }\n\n          return divMatrices(a, b);\n          break;\n\n        case \"spmatrix\":\n          error(\"Error in entrywisediv(A,B): B is a sparse matrix with zeros.\");\n          return undefined;\n          break;\n\n        default:\n          error(\"Error in entrywisediv(A,b): a is a matrix and B is a \" + tb + \".\");\n          return undefined;\n      }\n\n    case \"spmatrix\":\n      switch (tb) {\n        case \"number\":\n          return mulScalarspMatrix(1 / b, a);\n          break;\n\n        case \"matrix\":\n          if (a.m != b.m || a.n != b.n) {\n            error(\"Error in entrywisediv(A,B): size(A) = [\" + a.m + \",\" + a.n + \"] != [\" + b.m + \",\" + b.n + \"] = size(B).\");\n            return undefined;\n          }\n\n          return divMatrixspMatrix(a, b);\n          break;\n\n        case \"spmatrix\":\n          error(\"Error in entrywisediv(A,B): B is a sparse matrix with zeros.\");\n          return undefined;\n          break;\n\n        default:\n          error(\"Error in entrywisediv(A,b): a is a matrix and B is a \" + tb + \".\");\n          return undefined;\n      }\n\n      break;\n\n    default:\n      error(\"Error in entrywisediv(a,b): a must be a number, a vector or a matrix.\");\n      return undefined;\n      break;\n  }\n}\nexport function sum(A, sumalongdimension) {\n  switch (type(A)) {\n    case \"vector\":\n      if (arguments.length == 1 || sumalongdimension == 1) {\n        return sumVector(A);\n      } else {\n        return vectorCopy(A);\n      }\n\n      break;\n\n    case \"spvector\":\n      if (arguments.length == 1 || sumalongdimension == 1) return sumVector(A.val);else return A.copy();\n      break;\n\n    case \"matrix\":\n      if (arguments.length == 1) {\n        return sumMatrix(A);\n      } else if (sumalongdimension == 1) {\n        return sumMatrixRows(A);\n      } else if (sumalongdimension == 2) {\n        return sumMatrixCols(A);\n      } else return undefined;\n\n      break;\n\n    case \"spmatrix\":\n      if (arguments.length == 1) {\n        return sumVector(A.val);\n      } else if (sumalongdimension == 1) {\n        return sumspMatrixRows(A);\n      } else if (sumalongdimension == 2) {\n        return sumspMatrixCols(A);\n      } else return undefined;\n\n      break;\n\n    default:\n      return A;\n      break;\n  }\n}\n\nfunction sumVector(a) {\n  var i;\n  const n = a.length;\n  var res = a[0];\n\n  for (i = 1; i < n; i++) res += a[i];\n\n  return res;\n}\n\nfunction divVectorScalar(a, b) {\n  var i;\n  const n = a.length;\n  var res = new Float64Array(a);\n\n  for (i = 0; i < n; i++) res[i] /= b;\n\n  return res;\n}\n\nfunction solveGaussianElimination(Aorig, borig) {\n  // Solve square linear system Ax = b with Gaussian elimination\n  var i;\n  var j;\n  var k;\n  var A = matrixCopy(Aorig).toArrayOfFloat64Array(); // useful to quickly switch rows\n\n  var b = vectorCopy(borig);\n  const m = Aorig.m;\n  const n = Aorig.n;\n  if (m != n) return undefined; // Set to zero small values... ??\n\n  for (k = 0; k < m; k++) {\n    // Find imax = argmax_i=k...m |A_i,k|\n    var imax = k;\n    var Aimaxk = Math.abs(A[imax][k]);\n\n    for (i = k + 1; i < m; i++) {\n      var Aik = Math.abs(A[i][k]);\n\n      if (Aik > Aimaxk) {\n        imax = i;\n        Aimaxk = Aik;\n      }\n    }\n\n    if (isZero(Aimaxk)) {\n      console.log(\"** Warning in solve(A,b), A is square but singular, switching from Gaussian elimination to QR method.\");\n      return solveWithQRcolumnpivoting(Aorig, borig);\n    }\n\n    if (imax != k) {\n      // Permute the rows\n      var a = A[k];\n      A[k] = A[imax];\n      A[imax] = a;\n      var tmpb = b[k];\n      b[k] = b[imax];\n      b[imax] = tmpb;\n    }\n\n    var Ak = A[k]; // Normalize row k\n\n    var Akk = Ak[k];\n    b[k] /= Akk; //Ak[k] = 1; // not used afterwards\n\n    for (j = k + 1; j < n; j++) Ak[j] /= Akk;\n\n    if (Math.abs(Akk) < 1e-8) {\n      console.log(\"** Warning in solveGaussianElimination: \" + Akk + \" \" + k + \":\" + m);\n    } // Substract the kth row from others to get 0s in kth column\n\n\n    var Aik;\n    var bk = b[k];\n\n    for (i = 0; i < m; i++) {\n      if (i != k) {\n        var Ai = A[i];\n        Aik = Ai[k];\n\n        for (j = k + 1; j < n; j++) {\n          // Aij = 0  with j < k and Aik = 0 after this operation but is never used\n          Ai[j] -= Aik * Ak[j];\n        }\n\n        b[i] -= Aik * bk;\n      }\n    }\n  } // Solution:\n\n\n  return b;\n}\n\nfunction matrixCopy(A) {\n  var t = type(A);\n\n  switch (t) {\n    case \"vector\":\n      return vectorCopy(A);\n      break;\n\n    case \"ComplexVector\":\n      return new ComplexVector(A);\n      break;\n\n    case \"matrix\":\n      return new Matrix(A.m, A.n, A.val);\n      break;\n\n    case \"ComplexMatrix\":\n      return new ComplexMatrix(A);\n      break;\n\n    case \"Array\":\n      return arrayCopy(A);\n      break;\n\n    case \"spvector\":\n    case \"spmatrix\":\n      return A.copy();\n      break;\n\n    default:\n      error(\"Error in matrixCopy(A): A is not a matrix nor a vector.\");\n      return undefined;\n      break;\n  }\n}\n\nMatrix.prototype.toArrayOfFloat64Array = function () {\n  var A = new Array(this.m);\n\n  for (var i = 0; i < this.m; i++) A[i] = this.val.subarray(i * this.n, (i + 1) * this.n);\n\n  return A;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Matrix\");","map":{"version":3,"sources":["/Users/robgordon/Dev/react-xy-mixer/docs/src/components/lalolib.ts"],"names":["EPS","type","X","t","Array","isArray","isArrayOfNumbers","buffer","A","i","length","mat","elems","rowwise","k","concatWithNumbers","elemtypes","Float64Array","m","n","j","res","push","val","l","spmat","M","Matrix","p","set","size","c","array2mat","solve","b","tA","AtA","mul","transpose","Atb","spcgnr","solveGaussianElimination","solveWithQRcolumnpivoting","solveWithQRcolumnpivotingMultipleRHS","a","sa","sb","isScalar","get","mulComplexReal","mulScalarVector","mulScalarspVector","mulScalarComplexVector","mulScalarMatrix","mulScalarspMatrix","mulScalarComplexMatrix","undefined","mulComplex","mulComplexVector","mulComplexComplexVector","mulComplexspVector","mulComplexMatrix","mulComplexComplexMatrix","mulComplexspMatrix","error","dot","dotspVectorVector","dotComplexVectorVector","outerprodVectors","fullMatrix","outerprodComplexVectorVector","ComplexVector","re","im","spdot","outerprodspVectorVector","dotComplexVectorspVector","outerprodComplexVectors","mulMatrixVector","mulMatrixspVector","mulMatrixComplexVector","mulMatrixMatrix","mulMatrixspMatrix","mulComplexMatrixMatrix","mulspMatrixVector","mulspMatrixspVector","mulspMatrixMatrix","mulspMatrixspMatrix","mulComplexMatrixVector","mulComplexMatrixspVector","dotComplexVectors","mulComplexMatrixComplexVector","mulComplexMatrixspMatrix","mulComplexMatrices","transposespVector","ComplexMatrix","conj","transposeMatrix","transposespMatrix","transposeComplexMatrix","values","arguments","sizealongdimension","s","x","msg","Error","R","V","beta","r","piv","QRfact","qr","rank","btmp","vectorCopy","smallb","range","sub","zeros","backsubstitution","tmp","compute_Q","householder","Q","smallR","normA","norm","normR22","Rij","TOL","TOLnormR22square","tau","Rj","subarray","updateR","v","m_r","smallRiv","Ri","Rval","updateC","Rjr","computeNormR22","ri","swaprows","house","eye","smallQ","nmax","j_to_m","subMatrices","Aj","rows","cols","sumalongdimension","Math","abs","sqrt","rowmajor","nn","e","rj","mu","v0","sigma","x0","xx","isZero","rowsrange","colsrange","typerows","typecols","matrixCopy","typeA","getSubVector","getCols","getRows","getSubMatrix","getSubArray","row","col","spgetRows","spgetCols","getSubspVector","start","end","inc","floor","B","setVectorScalar","setVectorVector","setCols","setRows","sB","tB","setMatrixScalar","setMatrixColVector","setMatrixRowVector","setMatrixMatrix","ta","tb","addComplexReal","minusComplex","subScalarVector","subScalarMatrix","subScalarspVector","subScalarspMatrix","subVectorScalar","subMatrixScalar","addScalarspVector","addScalarspMatrix","subVectors","subVectorspVector","subMatrixspMatrix","subspVectorVector","subspVectors","subspMatrixMatrix","subspMatrices","scalar","vec","min","minVector","minMatrix","fullVector","minVectorScalar","minMatrixScalar","minMatrixRows","minMatrixCols","minVectorVector","minMatrixMatrix","entrywisediv","divScalarVector","divScalarMatrix","divScalarspVector","divScalarspMatrix","divVectorScalar","divVectors","divVectorspVector","divMatrixScalar","divMatrices","divMatrixspMatrix","sum","sumVector","copy","sumMatrix","sumMatrixRows","sumMatrixCols","sumspMatrixRows","sumspMatrixCols","Aorig","borig","toArrayOfFloat64Array","imax","Aimaxk","Aik","console","log","tmpb","Ak","Akk","bk","Ai","arrayCopy","prototype"],"mappings":"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","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\nconst EPS = 2.2205e-16;\n\nfunction type(X) {\n  if (X == null) return \"undefined\";\n  else if (X.type) return X.type;\n  else {\n    var t = typeof X;\n    if (t == \"object\") {\n      if (Array.isArray(X)) {\n        if (isArrayOfNumbers(X)) return \"vector\";\n        // for array vectors created by hand\n        else return \"Array\";\n      } else if (X.buffer) return \"vector\";\n      // Float64Array vector\n      else return t;\n    } else return t;\n  }\n}\n\nfunction isArrayOfNumbers(A) {\n  for (var i = 0; i < A.length; i++) if (typeof A[i] != \"number\") return false;\n  return true;\n}\n\nfunction mat(elems, rowwise) {\n  var k;\n  var concatWithNumbers = false;\n  var elemtypes = new Array(elems.length);\n  for (k = 0; k < elems.length; k++) {\n    elemtypes[k] = type(elems[k]);\n    if (elemtypes[k] == \"number\") concatWithNumbers = true;\n  }\n\n  if (typeof rowwise == \"undefined\") {\n    // check if vector of numbers\n    if (type(elems) == \"vector\") return new Float64Array(elems);\n\n    // check if 2D Array => toMatrix rowwise\n    var rowwise = true;\n    for (k = 0; k < elems.length; k++) {\n      if (!Array.isArray(elems[k]) || elemtypes[k] == \"vector\") {\n        rowwise = false;\n        if (elemtypes[k] == \"string\") return elems; // received vector of strings => return it directly\n      }\n    }\n  }\n\n  if (elems.length == 0) {\n    return [];\n  }\n\n  var m = 0;\n  var n = 0;\n  var i;\n  var j;\n  if (rowwise) {\n    var res = [];\n\n    for (k = 0; k < elems.length; k++) {\n      switch (elemtypes[k]) {\n        case \"matrix\":\n          res.push(elems[k].val);\n          m += elems[k].m;\n          n = elems[k].n;\n          break;\n\n        case \"vector\":\n          if (concatWithNumbers) {\n            // return a column by concatenating vectors and numbers\n            for (var l = 0; l < elems[k].length; l++) res.push(elems[k][l]);\n            n = 1;\n            m += elems[k].length;\n          } else {\n            // vector (auto transposed) as row in a matrix\n            res.push(elems[k]);\n            m += 1;\n            n = elems[k].length;\n          }\n          break;\n\n        case \"number\":\n          res.push(elems[k]);\n          m += 1;\n          n = 1;\n          break;\n\n        case \"spvector\":\n          return spmat(elems);\n\n        default:\n          // Array containing not only numbers...\n          // probably calling mat( Array2D ) => return Array2D\n          return elems;\n          break;\n      }\n    }\n    if (n == 1) {\n      var M = new Float64Array(res);\n      return M;\n    }\n    var M = new Matrix(m, n);\n    var p = 0;\n    for (k = 0; k < res.length; k++) {\n      if (res[k].buffer) {\n        M.val.set(res[k], p);\n        p += res[k].length;\n      } else {\n        for (j = 0; j < res[k].length; j++) M.val[p + j] = res[k][j];\n        p += res[k].length;\n      }\n    }\n    return M;\n  } else {\n    // compute size\n    m = size(elems[0], 1);\n    for (k = 0; k < elems.length; k++) {\n      if (elemtypes[k] == \"matrix\") n += elems[k].n;\n      else n++;\n      if (size(elems[k], 1) != m) return \"undefined\";\n    }\n\n    // Build matrix\n    var res = new Matrix(m, n);\n    var c;\n    for (i = 0; i < m; i++) {\n      c = 0; // col index\n      for (k = 0; k < elems.length; k++) {\n        switch (elemtypes[k]) {\n          case \"matrix\":\n            for (j = 0; j < elems[k].n; j++) {\n              res.val[i * n + j + c] = elems[k].val[i * elems[k].n + j];\n            }\n            c += elems[k].n;\n            break;\n\n          case \"vector\": //vector\n            res.val[i * n + c] = elems[k][i];\n            c++;\n            break;\n\n          case \"number\":\n            res.val[i * n + c] = elems[k];\n            c++;\n            break;\n          default:\n            break;\n        }\n      }\n    }\n\n    return res;\n  }\n}\n\nexport function array2mat(A) {\n  return mat(A, true);\n}\n\nexport function solve(A, b) {\n  /* Solve the linear system Ax = b\t*/\n\n  var tA = type(A);\n\n  if (tA == \"vector\" || tA == \"spvector\" || (tA == \"matrix\" && A.m == 1)) {\n    // One-dimensional least squares problem:\n    var AtA = mul(transpose(A), A);\n    var Atb = mul(transpose(A), b);\n    return Atb / AtA;\n  }\n\n  if (tA == \"spmatrix\") {\n    /*if ( A.m == A.n )\n\t\t\treturn spsolvecg(A, b); // assume A is positive definite\n\t\telse*/\n    return spcgnr(A, b);\n  }\n\n  if (type(b) == \"vector\") {\n    if (A.m == A.n) return solveGaussianElimination(A, b);\n    else return solveWithQRcolumnpivoting(A, b);\n  } else return solveWithQRcolumnpivotingMultipleRHS(A, b); // b is a matrix\n}\n\nfunction mul(a, b) {\n  var sa = size(a);\n  var sb = size(b);\n  if (!isScalar(a) && sa[0] == 1 && sa[1] == 1) a = get(a, 0, 0);\n  if (!isScalar(b) && sb[0] == 1 && sb[1] == 1) b = get(b, 0, 0);\n\n  switch (type(a)) {\n    case \"number\":\n      switch (type(b)) {\n        case \"number\":\n          return a * b;\n          break;\n        case \"Complex\":\n          return mulComplexReal(b, a);\n          break;\n        case \"vector\":\n          return mulScalarVector(a, b);\n          break;\n        case \"spvector\":\n          return mulScalarspVector(a, b);\n          break;\n        case \"ComplexVector\":\n          return mulScalarComplexVector(a, b);\n          break;\n        case \"matrix\":\n          return mulScalarMatrix(a, b);\n          break;\n        case \"spmatrix\":\n          return mulScalarspMatrix(a, b);\n          break;\n        case \"ComplexMatrix\":\n          return mulScalarComplexMatrix(a, b);\n          break;\n        default:\n          return undefined;\n          break;\n      }\n      break;\n    case \"Complex\":\n      switch (type(b)) {\n        case \"number\":\n          return mulComplexReal(a, b);\n          break;\n        case \"Complex\":\n          return mulComplex(a, b);\n          break;\n        case \"vector\":\n          return mulComplexVector(a, b);\n          break;\n        case \"ComplexVector\":\n          return mulComplexComplexVector(a, b);\n          break;\n        case \"spvector\":\n          return mulComplexspVector(a, b);\n          break;\n        case \"matrix\":\n          return mulComplexMatrix(a, b);\n          break;\n        case \"ComplexMatrix\":\n          return mulComplexComplexMatrix(a, b);\n          break;\n        case \"spmatrix\":\n          return mulComplexspMatrix(a, b);\n          break;\n        default:\n          return undefined;\n          break;\n      }\n      break;\n    case \"vector\":\n      switch (type(b)) {\n        case \"number\":\n          return mulScalarVector(b, a);\n          break;\n        case \"Complex\":\n          return mulComplexVector(b, a);\n          break;\n        case \"vector\":\n          if (a.length != b.length) {\n            error(\n              \"Error in mul(a,b) (dot product): a.length = \" +\n                a.length +\n                \" != \" +\n                b.length +\n                \" = b.length.\"\n            );\n            return undefined;\n          }\n          return dot(a, b);\n          break;\n        case \"spvector\":\n          if (a.length != b.length) {\n            error(\n              \"Error in mul(a,b) (dot product): a.length = \" +\n                a.length +\n                \" != \" +\n                b.length +\n                \" = b.length.\"\n            );\n            return undefined;\n          }\n          return dotspVectorVector(b, a);\n          break;\n        case \"ComplexVector\":\n          if (a.length != b.length) {\n            error(\n              \"Error in mul(a,b) (dot product): a.length = \" +\n                a.length +\n                \" != \" +\n                b.length +\n                \" = b.length.\"\n            );\n            return undefined;\n          }\n          return dotComplexVectorVector(b, a);\n          break;\n        case \"matrix\":\n          if (b.m == 1) return outerprodVectors(a, b.val);\n          else {\n            error(\n              \"Inconsistent dimensions in mul(a,B): size(a) = [\" +\n                sa[0] +\n                \",\" +\n                sa[1] +\n                \"], size(B) = [\" +\n                sb[0] +\n                \",\" +\n                sb[1] +\n                \"]\"\n            );\n            return undefined;\n          }\n          break;\n        case \"spmatrix\":\n          if (b.m == 1) return outerprodVectors(a, fullMatrix(b).val);\n          else {\n            error(\n              \"Inconsistent dimensions in mul(a,B): size(a) = [\" +\n                sa[0] +\n                \",\" +\n                sa[1] +\n                \"], size(B) = [\" +\n                sb[0] +\n                \",\" +\n                sb[1] +\n                \"]\"\n            );\n            return undefined;\n          }\n          break;\n        case \"ComplexMatrix\":\n          if (b.m == 1)\n            return transpose(\n              outerprodComplexVectorVector(\n                new ComplexVector(b.re, b.im, true),\n                a,\n                b.val\n              )\n            );\n          else {\n            error(\n              \"Inconsistent dimensions in mul(a,B): size(a) = [\" +\n                sa[0] +\n                \",\" +\n                sa[1] +\n                \"], size(B) = [\" +\n                sb[0] +\n                \",\" +\n                sb[1] +\n                \"]\"\n            );\n            return undefined;\n          }\n          break;\n        default:\n          return undefined;\n          break;\n      }\n      break;\n    case \"spvector\":\n      switch (type(b)) {\n        case \"number\":\n          return mulScalarspVector(b, a);\n          break;\n        case \"vector\":\n          if (a.length != b.length) {\n            error(\n              \"Error in mul(a,b) (dot product): a.length = \" +\n                a.length +\n                \" != \" +\n                b.length +\n                \" = b.length.\"\n            );\n            return undefined;\n          }\n          return dotspVectorVector(a, b);\n          break;\n        case \"spvector\":\n          if (a.length != b.length) {\n            error(\n              \"Error in mul(a,b) (dot product): a.length = \" +\n                a.length +\n                \" != \" +\n                b.length +\n                \" = b.length.\"\n            );\n            return undefined;\n          }\n          return spdot(b, a);\n          break;\n        case \"matrix\":\n          if (b.m == 1) return outerprodspVectorVector(a, b.val);\n          else {\n            error(\n              \"Inconsistent dimensions in mul(a,B): size(a) = [\" +\n                sa[0] +\n                \",\" +\n                sa[1] +\n                \"], size(B) = [\" +\n                sb[0] +\n                \",\" +\n                sb[1] +\n                \"]\"\n            );\n            return undefined;\n          }\n          break;\n        case \"spmatrix\":\n          if (b.m == 1) return outerprodspVectorVector(a, fullMatrix(b).val);\n          else {\n            error(\n              \"Inconsistent dimensions in mul(a,B): size(a) = [\" +\n                sa[0] +\n                \",\" +\n                sa[1] +\n                \"], size(B) = [\" +\n                sb[0] +\n                \",\" +\n                sb[1] +\n                \"]\"\n            );\n            return undefined;\n          }\n          break;\n        default:\n          return undefined;\n          break;\n      }\n      break;\n    case \"ComplexVector\":\n      switch (type(b)) {\n        case \"number\":\n          return mulScalarComplexVector(b, a);\n          break;\n        case \"Complex\":\n          return mulComplexComplexVector(b, a);\n          break;\n        case \"vector\":\n          if (a.length != b.length) {\n            error(\n              \"Error in mul(a,b) (dot product): a.length = \" +\n                a.length +\n                \" != \" +\n                b.length +\n                \" = b.length.\"\n            );\n            return undefined;\n          }\n          return dotComplexVectorVector(a, b);\n          break;\n        case \"spvector\":\n          if (a.length != b.length) {\n            error(\n              \"Error in mul(a,b) (dot product): a.length = \" +\n                a.length +\n                \" != \" +\n                b.length +\n                \" = b.length.\"\n            );\n            return undefined;\n          }\n          return dotComplexVectorspVector(a, b);\n          break;\n        case \"matrix\":\n          if (b.m == 1) return outerprodComplexVectorVector(a, b.val);\n          else {\n            error(\n              \"Inconsistent dimensions in mul(a,B): size(a) = [\" +\n                sa[0] +\n                \",\" +\n                sa[1] +\n                \"], size(B) = [\" +\n                sb[0] +\n                \",\" +\n                sb[1] +\n                \"]\"\n            );\n            return undefined;\n          }\n          break;\n        case \"spmatrix\":\n          if (b.m == 1)\n            return outerprodComplexVectorVector(a, fullMatrix(b).val);\n          else {\n            error(\n              \"Inconsistent dimensions in mul(a,B): size(a) = [\" +\n                sa[0] +\n                \",\" +\n                sa[1] +\n                \"], size(B) = [\" +\n                sb[0] +\n                \",\" +\n                sb[1] +\n                \"]\"\n            );\n            return undefined;\n          }\n          break;\n        case \"ComplexMatrix\":\n          if (b.m == 1)\n            return outerprodComplexVectors(\n              a,\n              new ComplexVector(b.re, b.im, true)\n            );\n          else {\n            error(\n              \"Inconsistent dimensions in mul(a,B): size(a) = [\" +\n                sa[0] +\n                \",\" +\n                sa[1] +\n                \"], size(B) = [\" +\n                sb[0] +\n                \",\" +\n                sb[1] +\n                \"]\"\n            );\n            return undefined;\n          }\n          break;\n        default:\n          return undefined;\n          break;\n      }\n      break;\n\n    case \"matrix\":\n      switch (type(b)) {\n        case \"number\":\n          return mulScalarMatrix(b, a);\n          break;\n        case \"Complex\":\n          return mulComplexMatrix(b, a);\n          break;\n        case \"vector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.val.length != b.length) {\n              error(\n                \"Error in mul(a',b): a.length = \" +\n                  a.val.length +\n                  \" != \" +\n                  b.length +\n                  \" =  b.length.\"\n              );\n              return undefined;\n            }\n            return dot(a.val, b);\n          } else {\n            if (a.n != b.length) {\n              error(\n                \"Error in mul(A,b): A.n = \" +\n                  a.n +\n                  \" != \" +\n                  b.length +\n                  \" = b.length.\"\n              );\n              return undefined;\n            }\n            return mulMatrixVector(a, b);\n          }\n          break;\n        case \"spvector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.val.length != b.length) {\n              error(\n                \"Error in mul(a',b): a.length = \" +\n                  a.val.length +\n                  \" != \" +\n                  b.length +\n                  \" =  b.length.\"\n              );\n              return undefined;\n            }\n            return dotspVectorVector(b, a.val);\n          } else {\n            if (a.n != b.length) {\n              error(\n                \"Error in mul(A,b): A.n = \" +\n                  a.n +\n                  \" != \" +\n                  b.length +\n                  \" = b.length.\"\n              );\n              return undefined;\n            }\n            return mulMatrixspVector(a, b);\n          }\n          break;\n        case \"ComplexVector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.val.length != b.length) {\n              error(\n                \"Error in mul(a',b): a.length = \" +\n                  a.val.length +\n                  \" != \" +\n                  b.length +\n                  \" =  b.length.\"\n              );\n              return undefined;\n            }\n            return dotComplexVectorVector(b, a.val);\n          } else {\n            if (a.n != b.length) {\n              error(\n                \"Error in mul(A,b): A.n = \" +\n                  a.n +\n                  \" != \" +\n                  b.length +\n                  \" = b.length.\"\n              );\n              return undefined;\n            }\n            return mulMatrixComplexVector(a, b);\n          }\n          break;\n        case \"matrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n          return mulMatrixMatrix(a, b);\n          break;\n        case \"spmatrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n          return mulMatrixspMatrix(a, b);\n          break;\n        case \"ComplexMatrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n          return transpose(mulComplexMatrixMatrix(transpose(b), transpose(a)));\n          break;\n        default:\n          return undefined;\n          break;\n      }\n      break;\n    case \"spmatrix\":\n      switch (type(b)) {\n        case \"number\":\n          return mulScalarspMatrix(b, a);\n          break;\n        case \"vector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.n != b.length) {\n              error(\n                \"Error in mul(a',b): a.length = \" +\n                  a.val.length +\n                  \" != \" +\n                  b.length +\n                  \" =  b.length.\"\n              );\n              return undefined;\n            }\n            return dot(fullMatrix(a).val, b);\n          } else {\n            if (a.n != b.length) {\n              error(\n                \"Error in mul(A,b): A.n = \" +\n                  a.n +\n                  \" != \" +\n                  b.length +\n                  \" = b.length.\"\n              );\n              return undefined;\n            }\n            return mulspMatrixVector(a, b);\n          }\n          break;\n        case \"spvector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.n != b.length) {\n              error(\n                \"Error in mul(a',b): a.length = \" +\n                  a.val.length +\n                  \" != \" +\n                  b.length +\n                  \" =  b.length.\"\n              );\n              return undefined;\n            }\n            return dotspVectorVector(b, fullMatrix(a).val);\n          } else {\n            if (a.n != b.length) {\n              error(\n                \"Error in mul(A,b): A.n = \" +\n                  a.n +\n                  \" != \" +\n                  b.length +\n                  \" = b.length.\"\n              );\n              return undefined;\n            }\n            return mulspMatrixspVector(a, b);\n          }\n          break;\n        case \"matrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n          return mulspMatrixMatrix(a, b);\n          break;\n        case \"spmatrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n          return mulspMatrixspMatrix(a, b);\n          break;\n        default:\n          return undefined;\n          break;\n      }\n      break;\n    case \"ComplexMatrix\":\n      switch (type(b)) {\n        case \"number\":\n          return mulScalarComplexMatrix(b, a);\n          break;\n        case \"Complex\":\n          return mulComplexComplexMatrix(b, a);\n          break;\n        case \"vector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.val.length != b.length) {\n              error(\n                \"Error in mul(a',b): a.length = \" +\n                  a.val.length +\n                  \" != \" +\n                  b.length +\n                  \" =  b.length.\"\n              );\n              return undefined;\n            }\n            return dotComplexVectorVector(\n              new ComplexVector(a.re, a.im, true),\n              b\n            );\n          } else {\n            if (a.n != b.length) {\n              error(\n                \"Error in mul(A,b): A.n = \" +\n                  a.n +\n                  \" != \" +\n                  b.length +\n                  \" = b.length.\"\n              );\n              return undefined;\n            }\n            return mulComplexMatrixVector(a, b);\n          }\n          break;\n        case \"spvector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.val.length != b.length) {\n              error(\n                \"Error in mul(a',b): a.length = \" +\n                  a.val.length +\n                  \" != \" +\n                  b.length +\n                  \" =  b.length.\"\n              );\n              return undefined;\n            }\n            return dotComplexVectorspVector(\n              new ComplexVector(a.re, a.im, true),\n              b\n            );\n          } else {\n            if (a.n != b.length) {\n              error(\n                \"Error in mul(A,b): A.n = \" +\n                  a.n +\n                  \" != \" +\n                  b.length +\n                  \" = b.length.\"\n              );\n              return undefined;\n            }\n            return mulComplexMatrixspVector(a, b);\n          }\n          break;\n        case \"ComplexVector\":\n          if (a.m == 1) {\n            // dot product with explicit transpose\n            if (a.val.length != b.length) {\n              error(\n                \"Error in mul(a',b): a.length = \" +\n                  a.val.length +\n                  \" != \" +\n                  b.length +\n                  \" =  b.length.\"\n              );\n              return undefined;\n            }\n            return dotComplexVectors(new ComplexVector(a.re, a.im, true), b);\n          } else {\n            if (a.n != b.length) {\n              error(\n                \"Error in mul(A,b): A.n = \" +\n                  a.n +\n                  \" != \" +\n                  b.length +\n                  \" = b.length.\"\n              );\n              return undefined;\n            }\n            return mulComplexMatrixComplexVector(a, b);\n          }\n          break;\n        case \"matrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n          return mulComplexMatrixMatrix(a, b);\n          break;\n        case \"spmatrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n          return mulComplexMatrixspMatrix(a, b);\n          break;\n        case \"ComplexMatrix\":\n          if (a.n != b.m) {\n            error(\"Error in mul(A,B): A.n = \" + a.n + \" != \" + b.m + \" = B.m.\");\n            return undefined;\n          }\n          return mulComplexMatrices(a, b);\n          break;\n        default:\n          return undefined;\n          break;\n      }\n      break;\n    default:\n      return undefined;\n      break;\n  }\n}\n\nfunction transpose(A) {\n  var i;\n  var j;\n  switch (type(A)) {\n    case \"number\":\n      return A;\n      break;\n    case \"vector\":\n      var res = new Matrix(1, A.length, A);\n      return res; // matrix with a single row\n      break;\n    case \"spvector\":\n      return transposespVector(A);\n      break;\n    case \"ComplexVector\":\n      var res = new ComplexMatrix(1, A.length, conj(A));\n      return res; // matrix with a single row\n      break;\n    case \"matrix\":\n      return transposeMatrix(A);\n      break;\n    case \"spmatrix\":\n      return transposespMatrix(A);\n      break;\n    case \"ComplexMatrix\":\n      return transposeComplexMatrix(A);\n      break;\n    default:\n      return undefined;\n      break;\n  }\n}\n\nfunction Matrix(m, n, values) {\n  /** @const */ this.length = m;\n  /** @const */ this.m = m;\n  /** @const */ this.n = n;\n  /** @const */ this.size = [m, n];\n  /** @const */ this.type = \"matrix\";\n\n  if (arguments.length == 2) this.val = new Float64Array(m * n);\n  // simple m x n zeros\n  else if (arguments.length == 3) this.val = new Float64Array(values);\n  // m x n filled with values with copy\n  else if (arguments.length == 4) this.val = values; // m x n filled with values without copy\n}\n\nfunction size(A, sizealongdimension) {\n  var s;\n  switch (type(A)) {\n    case \"string\":\n    case \"boolean\":\n    case \"number\":\n    case \"Complex\":\n      s = [1, 1];\n      break;\n    case \"vector\":\n    case \"spvector\":\n    case \"ComplexVector\":\n      s = [A.length, 1];\n      break;\n    case \"matrix\":\n    case \"spmatrix\":\n    case \"ComplexMatrix\":\n      s = A.size;\n      break;\n    case \"object\":\n      s = [1, 1];\n      break;\n    default:\n      s = [1, 1];\n      //error( \"Cannot determine size of object\" );\n      break;\n  }\n\n  if (typeof sizealongdimension == \"undefined\") return s;\n  else return s[sizealongdimension - 1];\n}\n\nfunction isScalar(x) {\n  switch (typeof x) {\n    case \"string\":\n    case \"number\":\n    case \"boolean\":\n      return true;\n      break;\n    default:\n      if (type(x) == \"Complex\") return true;\n      else return false;\n      break;\n  }\n}\n\nfunction dot(a, b) {\n  const n = a.length;\n  var i;\n  var res = 0;\n  for (i = 0; i < n; i++) res += a[i] * b[i];\n  return res;\n}\n\nfunction error(msg) {\n  throw new Error(msg);\n  //\tpostMessage( {\"error\": msg} );\n}\n\nfunction solveWithQRcolumnpivoting(A, b) {\n  var m;\n  var n;\n  var R;\n  var V;\n  var beta;\n  var r;\n  var piv;\n  if (type(A) == \"matrix\") {\n    // Compute the QR factorization\n    m = A.m;\n    n = A.n;\n    var QRfact = qr(A);\n    R = QRfact.R;\n    V = QRfact.V;\n    beta = QRfact.beta;\n    r = QRfact.rank;\n    piv = QRfact.piv;\n  } else {\n    // we get the QR factorization in A\n    R = A.R;\n    r = A.rank;\n    V = A.V;\n    beta = A.beta;\n    piv = A.piv;\n    m = R.m;\n    n = R.n;\n  }\n\n  var btmp = vectorCopy(b);\n  var j;\n  var i;\n  var k;\n\n  var smallb;\n  // b = Q' * b\n  for (j = 0; j < r; j++) {\n    // b(j:m) = (I - beta v v^T ) * b(j:m)\n    smallb = get(btmp, range(j, m));\n\n    set(btmp, range(j, m), sub(smallb, mul(beta[j] * mul(V[j], smallb), V[j])));\n  }\n  // Solve R x = b with backsubstitution\n  var x = zeros(n);\n\n  if (r > 1) {\n    set(x, range(0, r), backsubstitution(R, get(btmp, range(r))));\n    // note: if m < n, backsubstitution only uses n columns of R.\n  } else {\n    x[0] = btmp[0] / R.val[0];\n  }\n\n  // and apply permutations\n  for (j = r - 1; j >= 0; j--) {\n    if (piv[j] != j) {\n      var tmp = x[j];\n      x[j] = x[piv[j]];\n      x[piv[j]] = tmp;\n    }\n  }\n  return x;\n}\n\nfunction qr(A, compute_Q) {\n  // QR factorization with column pivoting AP = QR based on Householder reflections\n  // A with m rows and n cols; m >= n (well, it also works with m < n)\n  // piv = vector of permutations : P = P_rank with P_j = identity with swaprows ( j, piv(j) )\n\n  // Implemented with R transposed for faster computations on rows instead of columns\n\n  /* TEST\n\tA  = [[12,-51,4],[6,167,-68],[-4,24,-41]]\n\tQR = qr(A)\n\tQR.R\n\t\n\t\n\t*/\n  const m = A.m;\n  const n = A.n;\n\n  /*\n\tif ( n > m)\n\t\treturn \"QR factorization unavailable for n > m.\";\n\t*/\n\n  var i;\n  var j;\n\n  var householder;\n  var R = transpose(A); // transposed for faster implementation\n  var Q;\n\n  var V = []; // store householder vectors in this list (not a matrix)\n  var beta = zeros(n);\n  var piv = zeros(n);\n\n  var smallR;\n\n  var r = -1; // rank estimate -1\n\n  var normA = norm(A);\n  var normR22 = normA;\n  var Rij;\n\n  const TOL = 1e-5;\n  var TOLnormR22square = TOL * normA;\n  TOLnormR22square *= TOLnormR22square;\n\n  var tau = 0;\n  var k = 0;\n  var c = zeros(n);\n  for (j = 0; j < n; j++) {\n    var Rj = R.val.subarray(j * R.n, j * R.n + R.n);\n    c[j] = dot(Rj, Rj);\n    if (c[j] > tau) {\n      tau = c[j];\n      k = j;\n    }\n  }\n\n  var updateR = function (r, v, beta) {\n    // set ( R, range(r,n), range(r,m) , subMatrices (  smallR , outerprodVectors( mulMatrixVector( smallR, householder.v), householder.v,  householder.beta ) ) ) ;\n    // most of the time is spent here...\n    var i, j, l;\n    var m_r = m - r;\n    for (i = r; i < n; i++) {\n      var smallRiv = 0;\n      var Ri = i * m + r; // =  i * R.n + r\n      var Rval = R.val.subarray(Ri, Ri + m_r);\n      for (l = 0; l < m_r; l++) smallRiv += Rval[l] * v[l]; //smallRiv += R.val[Ri + l] * v[l];\n      smallRiv *= beta;\n      for (j = 0; j < m_r; j++) {\n        Rval[j] -= smallRiv * v[j]; // R.val[Ri + j] -= smallRiv * v[j];\n      }\n    }\n  };\n\n  // Update c\n  var updateC = function (r) {\n    var j;\n    for (j = r + 1; j < n; j++) {\n      var Rjr = R.val[j * m + r];\n      c[j] -= Rjr * Rjr;\n    }\n\n    // tau, k = max ( c[r+1 : n] )\n    k = r + 1;\n    tau = c[r + 1];\n    for (j = r + 2; j < n; j++) {\n      if (c[j] > tau) {\n        tau = c[j];\n        k = j;\n      }\n    }\n  };\n\n  // Compute norm of residuals\n  var computeNormR22 = function (r) {\n    //normR22 = norm(get ( R, range(r+1,n), range(r+1,m), ) );\n    var normR22 = 0;\n    var i = r + 1;\n    var ri = i * m;\n    var j;\n    while (i < n && normR22 <= TOLnormR22square) {\n      for (j = r + 1; j < m; j++) {\n        var Rij = R.val[ri + j];\n        normR22 += Rij * Rij;\n      }\n      i++;\n      ri += m;\n    }\n    return normR22;\n  };\n\n  while (tau > EPS && r < n - 1 && normR22 > TOLnormR22square) {\n    r++;\n\n    piv[r] = k;\n    swaprows(R, r, k);\n    c[k] = c[r];\n    c[r] = tau;\n\n    if (r < m - 1) {\n      householder = house(R.val.subarray(r * R.n + r, r * R.n + m)); // house only reads vec so subarray is ok\n    } else {\n      householder.v = [1];\n      householder.beta = 0;\n      //smallR = R[m-1][m-1];\n    }\n\n    if (r < n - 1) {\n      // smallR is a matrix\n      updateR(r, householder.v, householder.beta);\n    } else {\n      // smallR is a row vector (or a number if m=n):\n      if (r < m - 1) {\n        updateR(r, householder.v, householder.beta);\n        /*\n\t\t\t\tvar r_to_m = range(r,m);\n\t\t\t\tsmallR = get(R, r, r_to_m);\n\t\t\t\tset ( R, r , r_to_m, sub (  smallR , transpose(mul( householder.beta * mul( smallR, householder.v) ,householder.v  ) )) ) ;*/\n      } else {\n        //var smallRnumber = R.val[(m-1)*R.n + m-1]; // beta is zero, so no update\n        //set ( R, r , r, sub (  smallRnumber , transpose(mul( householder.beta * mul( smallRnumber, householder.v) ,householder.v  ) )) ) ;\n      }\n    }\n\n    // Store householder vectors and beta\n    V[r] = vectorCopy(householder.v);\n    beta[r] = householder.beta;\n\n    if (r < n - 1) {\n      // Update c\n      updateC(r);\n\n      // stopping criterion for rank estimation\n      if (r < m - 1) normR22 = computeNormR22(r);\n      else normR22 = 0;\n    }\n  }\n\n  if (compute_Q) {\n    Q = eye(m);\n    var smallQ;\n    var nmax = r;\n    if (m > r + 1) nmax = r - 1;\n    for (j = nmax; j >= 0; j--) {\n      if (j == m - 1) {\n        Q.val[j * m + j] -= beta[j] * V[j][0] * V[j][0] * Q.val[j * m + j];\n      } else {\n        var j_to_m = range(j, m);\n        smallQ = get(Q, j_to_m, j_to_m); // matrix\n        set(\n          Q,\n          j_to_m,\n          j_to_m,\n          subMatrices(\n            smallQ,\n            outerprodVectors(\n              V[j],\n              mulMatrixVector(transposeMatrix(smallQ), V[j]),\n              beta[j]\n            )\n          )\n        );\n      }\n    }\n  }\n\n  return { Q: Q, R: transpose(R), V: V, beta: beta, piv: piv, rank: r + 1 };\n}\n\nfunction transposeMatrix(A) {\n  var i;\n  var j;\n  const m = A.m;\n  const n = A.n;\n  if (m > 1) {\n    var res = zeros(n, m);\n    var Aj = 0;\n    for (j = 0; j < m; j++) {\n      var ri = 0;\n      for (i = 0; i < n; i++) {\n        res.val[ri + j] = A.val[Aj + i];\n        ri += m;\n      }\n      Aj += n;\n    }\n    return res;\n  } else {\n    return A.val;\n  }\n}\n\nfunction zeros(rows, cols) {\n  // Create a matrix or vector of ZERO\n  if (arguments.length == 1 || cols == 1) {\n    return new Float64Array(rows);\n  } else {\n    return new Matrix(rows, cols);\n  }\n}\n\nfunction norm(A, sumalongdimension) {\n  // l2-norm (Euclidean norm) of vectors or Frobenius norm of matrix\n  var i;\n  var j;\n  switch (type(A)) {\n    case \"number\":\n      return Math.abs(A);\n      break;\n    case \"vector\":\n      if (arguments.length == 1 || sumalongdimension == 1) {\n        return Math.sqrt(dot(A, A));\n      } else return abs(A);\n      break;\n    case \"spvector\":\n      if (arguments.length == 1 || sumalongdimension == 1) {\n        return Math.sqrt(dot(A.val, A.val));\n      } else return abs(A);\n      break;\n    case \"matrix\":\n      if (arguments.length == 1) {\n        return Math.sqrt(dot(A.val, A.val));\n      } else if (sumalongdimension == 1) {\n        // norm of columns, result is row vector\n        const n = A.n;\n        var res = zeros(1, n);\n        var r = 0;\n        for (i = 0; i < A.m; i++) {\n          for (j = 0; j < n; j++) res.val[j] += A.val[r + j] * A.val[r + j];\n          r += n;\n        }\n        for (j = 0; j < n; j++) res.val[j] = Math.sqrt(res.val[j]);\n        return res;\n      } else if (sumalongdimension == 2) {\n        // norm of rows, result is column vector\n        var res = zeros(A.m);\n        var r = 0;\n        for (i = 0; i < A.m; i++) {\n          for (j = 0; j < A.n; j++) res[i] += A.val[r + j] * A.val[r + j];\n          r += A.n;\n          res[i] = Math.sqrt(res[i]);\n        }\n\n        return res;\n      } else return \"undefined\";\n      break;\n    case \"spmatrix\":\n      if (arguments.length == 1) {\n        return Math.sqrt(dot(A.val, A.val));\n      } else if (sumalongdimension == 1 && !A.rowmajor) {\n        // norm of columns, result is row vector\n        const nn = A.n;\n        var res = zeros(1, nn);\n        for (j = 0; j < nn; j++) {\n          var s = A.cols[j];\n          var e = A.cols[j + 1];\n          for (var k = s; k < e; k++) res.val[j] += A.val[k] * A.val[k];\n          res.val[j] = Math.sqrt(res.val[j]);\n        }\n        return res;\n      } else if (sumalongdimension == 2 && A.rowmajor) {\n        // norm of rows, result is column vector\n        var res = zeros(A.m);\n        for (i = 0; i < A.m; i++) {\n          var s = A.rows[i];\n          var e = A.rows[i + 1];\n          for (var k = s; k < e; k++) res[i] += A.val[k] * A.val[k];\n          res[i] = Math.sqrt(res[i]);\n        }\n\n        return res;\n      } else return \"undefined\";\n      break;\n    default:\n      return \"undefined\";\n  }\n}\n\nfunction swaprows(A, i, j) {\n  if (i != j) {\n    var ri = i * A.n;\n    var rj = j * A.n;\n    var tmp = vectorCopy(A.val.subarray(ri, ri + A.n));\n    A.val.set(vectorCopy(A.val.subarray(rj, rj + A.n)), ri);\n    A.val.set(tmp, rj);\n  }\n}\n\nfunction vectorCopy(a) {\n  return new Float64Array(a);\n}\n\nfunction house(x) {\n  // Compute Houselholder vector v such that\n  // P = (I - beta v v') is orthogonal and Px = ||x|| e_1\n\n  const n = x.length;\n  var i;\n  var mu;\n  var beta;\n  var v = zeros(n);\n  var v0;\n  var sigma;\n\n  var x0 = x[0];\n  var xx = dot(x, x);\n\n  // sigma = x(2:n)^T x(2:n)\n  sigma = xx - x0 * x0;\n\n  if (isZero(sigma)) {\n    // x(2:n) is zero =>  v=[1,0...0], beta = 0\n    beta = 0;\n    v[0] = 1;\n  } else {\n    mu = Math.sqrt(xx); // norm(x) ; //Math.sqrt( x0*x0 + sigma );\n    if (x0 < EPS) {\n      v0 = x0 - mu;\n    } else {\n      v0 = -sigma / (x0 + mu);\n    }\n\n    beta = (2 * v0 * v0) / (sigma + v0 * v0);\n\n    // v = [v0,x(2:n)] / v0\n    v[0] = 1;\n    for (i = 1; i < n; i++) v[i] = x[i] / v0;\n  }\n\n  return { v: v, beta: beta };\n}\n\nfunction isZero(x) {\n  return Math.abs(x) < EPS;\n}\n\nfunction get(A, rowsrange, colsrange) {\n  var typerows = typeof rowsrange;\n  var typecols = typeof colsrange;\n\n  if (arguments.length == 1) return matrixCopy(A);\n\n  var typeA = type(A);\n  if (typeA == \"vector\") {\n    if (typerows == \"number\") {\n      if (rowsrange >= 0 && rowsrange < A.length) return A[rowsrange];\n      // get v[i]\n      else {\n        error(\n          \"Error in a[i] = get(a,i): Index i=\" +\n            rowsrange +\n            \" out of bounds [0,\" +\n            (A.length - 1) +\n            \"]\"\n        );\n        return undefined;\n      }\n    } else {\n      return getSubVector(A, rowsrange);\n    }\n  } else if (typeA == \"matrix\") {\n    if (typerows == \"number\") rowsrange = [rowsrange];\n\n    if (typecols == \"number\") colsrange = [colsrange];\n\n    if (rowsrange.length == 1 && colsrange.length == 1)\n      return A.val[rowsrange[0] * A.n + colsrange[0]]; // get ( A, i, j)\n\n    if (rowsrange.length == 0) return getCols(A, colsrange); // get(A,[],4) <=> cols(A,4)\n\n    if (colsrange.length == 0) return getRows(A, rowsrange); // get(A,3,[]) <=> rows(A,3)\n\n    // otherwise:\n    return getSubMatrix(A, rowsrange, colsrange);\n  } else if (typeA == \"Array\") {\n    if (typerows == \"number\") return A[rowsrange];\n    else return getSubArray(A, rowsrange);\n  } else if (typeA == \"spmatrix\") {\n    if (typerows == \"number\") rowsrange = [rowsrange];\n\n    if (typecols == \"number\") colsrange = [colsrange];\n\n    if (rowsrange.length == 1 && colsrange.length == 1)\n      return A.get(rowsrange[0], colsrange[0]); // get ( A, i, j)\n\n    if (rowsrange.length == 1 && A.rowmajor) return A.row(rowsrange[0]);\n    if (colsrange.length == 1 && !A.rowmajor) return A.col(colsrange[0]);\n\n    if (colsrange.length == 0) return spgetRows(A, rowsrange);\n    if (rowsrange.length == 0) return spgetCols(A, colsrange);\n\n    // TODO\n  } else if (typeA == \"spvector\") {\n    if (typerows == \"number\") return A.get(rowsrange);\n    // get v[i]\n    else return getSubspVector(A, rowsrange); //TODO\n  } else if (typeA == \"ComplexVector\") {\n    if (typerows == \"number\") return A.get(rowsrange);\n    // get v[i]\n    else return A.getSubVector(rowsrange);\n  } else if (typeA == \"ComplexMatrix\") {\n    if (typerows == \"number\") rowsrange = [rowsrange];\n\n    if (typecols == \"number\") colsrange = [colsrange];\n\n    if (rowsrange.length == 1 && colsrange.length == 1) return A.get(i, j);\n\n    if (rowsrange.length == 0) return A.getCols(colsrange); // get(A,[],4) <=> cols(A,4)\n\n    if (colsrange.length == 0) return A.getRows(rowsrange); // get(A,3,[]) <=> rows(A,3)\n\n    // otherwise:\n    return A.getSubMatrix(rowsrange, colsrange);\n  }\n  return undefined;\n}\n\nfunction range(start, end, inc) {\n  // python-like range function\n  // returns [0,... , end-1]\n  if (typeof start == \"undefined\") return [];\n\n  if (typeof inc == \"undefined\") var inc = 1;\n  if (typeof end == \"undefined\") {\n    var end = start;\n    start = 0;\n  }\n\n  if (start == end - inc) {\n    return start;\n  } else if (start == end) {\n    return [];\n  } else if (start > end) {\n    if (inc > 0) inc *= -1;\n    var r = new Array(Math.floor((start - end) / Math.abs(inc)));\n    var k = 0;\n    for (var i = start; i > end; i += inc) {\n      r[k] = i;\n      k++;\n    }\n  } else {\n    var r = new Array(Math.floor((end - start) / inc));\n    var k = 0;\n    for (var i = start; i < end; i += inc) {\n      r[k] = i;\n      k++;\n    }\n  }\n  return r;\n}\n\nfunction getSubVector(a, rowsrange) {\n  const n = rowsrange.length;\n  var res = new Float64Array(n);\n  for (var i = 0; i < n; i++) {\n    res[i] = a[rowsrange[i]];\n  }\n  return res;\n}\n\nfunction set(A, rowsrange, colsrange, B) {\n  var i;\n  var j;\n  var k;\n  var l;\n  var n;\n\n  var typerows = typeof rowsrange;\n  var typecols = typeof colsrange;\n\n  if (arguments.length == 1) return undefined;\n\n  var typeA = type(A);\n  if (typeA == \"vector\") {\n    B = colsrange;\n    if (typerows == \"number\") {\n      A[rowsrange] = B;\n      return B;\n    } else if (rowsrange.length == 0) rowsrange = range(A.length);\n\n    if (size(B, 1) == 1) {\n      setVectorScalar(A, rowsrange, B);\n    } else {\n      setVectorVector(A, rowsrange, B);\n    }\n    return B;\n  } else if (typeA == \"matrix\") {\n    if (typerows == \"number\") rowsrange = [rowsrange];\n    if (typecols == \"number\") colsrange = [colsrange];\n\n    if (rowsrange.length == 1 && colsrange.length == 1) {\n      A.val[rowsrange[0] * A.n + colsrange[0]] = B;\n      return B;\n    }\n\n    if (rowsrange.length == 0) {\n      setCols(A, colsrange, B);\n      return B;\n    }\n\n    if (colsrange.length == 0) {\n      setRows(A, rowsrange, B);\n      return B;\n    }\n\n    // Set a submatrix\n    var sB = size(B);\n    var tB = type(B);\n    if (sB[0] == 1 && sB[1] == 1) {\n      if (tB == \"number\") setMatrixScalar(A, rowsrange, colsrange, B);\n      else if (tB == \"vector\") setMatrixScalar(A, rowsrange, colsrange, B[0]);\n      else setMatrixScalar(A, rowsrange, colsrange, B.val[0]);\n    } else {\n      if (colsrange.length == 1)\n        setMatrixColVector(A, rowsrange, colsrange[0], B);\n      else if (rowsrange.length == 1) {\n        if (tB == \"vector\") setMatrixRowVector(A, rowsrange[0], colsrange, B);\n        else setMatrixRowVector(A, rowsrange[0], colsrange, B.val);\n      } else setMatrixMatrix(A, rowsrange, colsrange, B);\n    }\n    return B;\n  } else if (typeA == \"ComplexVector\") {\n    B = colsrange;\n    if (typerows == \"number\") {\n      A.set(rowsrange, B);\n      return B;\n    } else if (rowsrange.length == 0) rowsrange = range(A.length);\n\n    if (size(B, 1) == 1) {\n      A.setVectorScalar(rowsrange, B);\n    } else {\n      A.setVectorVector(rowsrange, B);\n    }\n    return B;\n  }\n}\n\nexport function sub(a, b) {\n  const ta = type(a);\n  const tb = type(b);\n  if (ta == \"number\" && tb == \"number\") return a - b;\n  else if (ta == \"number\") {\n    switch (tb) {\n      case \"Complex\":\n        return addComplexReal(minusComplex(b), a);\n        break;\n      case \"vector\":\n        return subScalarVector(a, b);\n        break;\n      case \"matrix\":\n        return subScalarMatrix(a, b);\n        break;\n      case \"spvector\":\n        return subScalarspVector(a, b);\n        break;\n      case \"spmatrix\":\n        return subScalarspMatrix(a, b);\n        break;\n      default:\n        return undefined;\n        break;\n    }\n  } else if (tb == \"number\") {\n    switch (ta) {\n      case \"Complex\":\n        return addComplexReal(b, -a);\n        break;\n      case \"vector\":\n        return subVectorScalar(a, b);\n        break;\n      case \"matrix\":\n        return subMatrixScalar(a, b);\n        break;\n      case \"spvector\":\n        return addScalarspVector(-b, a);\n        break;\n      case \"spmatrix\":\n        return addScalarspMatrix(-b, a);\n        break;\n      default:\n        return undefined;\n        break;\n    }\n  } else if (ta == \"vector\") {\n    switch (tb) {\n      case \"vector\":\n        // vector substraction\n        if (a.length != b.length) {\n          error(\n            \"Error in sub(a,b): a.length = \" +\n              a.length +\n              \" != \" +\n              b.length +\n              \" = b.length.\"\n          );\n          return undefined;\n        }\n        return subVectors(a, b);\n        break;\n      case \"spvector\":\n        // vector substraction\n        if (a.length != b.length) {\n          error(\n            \"Error in sub(a,b): a.length = \" +\n              a.length +\n              \" != \" +\n              b.length +\n              \" = b.length.\"\n          );\n          return undefined;\n        }\n        return subVectorspVector(a, b);\n        break;\n      case \"matrix\":\n      case \"spmatrix\":\n      default:\n        error(\"Error in sub(a,B): a is a vector and B is a \" + tb + \".\");\n        return undefined;\n        break;\n    }\n  } else if (ta == \"matrix\") {\n    switch (tb) {\n      case \"matrix\":\n        // Matrix sub\n        if (a.m != b.m || a.n != b.n) {\n          error(\n            \"Error in sub(A,B): size(A) = [\" +\n              a.m +\n              \",\" +\n              a.n +\n              \"] != [\" +\n              b.m +\n              \",\" +\n              b.n +\n              \"] = size(B).\"\n          );\n          return undefined;\n        }\n        return subMatrices(a, b);\n        break;\n      case \"spmatrix\":\n        // Matrix addition\n        if (a.m != b.m || a.n != b.n) {\n          error(\n            \"Error in sub(A,B): size(A) = [\" +\n              a.m +\n              \",\" +\n              a.n +\n              \"] != [\" +\n              b.m +\n              \",\" +\n              b.n +\n              \"] = size(B).\"\n          );\n          return undefined;\n        }\n        return subMatrixspMatrix(a, b);\n        break;\n      case \"vector\":\n      case \"spvector\":\n      default:\n        error(\"Error in sub(A,b): A is a matrix and b is a \" + tb + \".\");\n        return undefined;\n        break;\n    }\n  } else if (ta == \"spvector\") {\n    switch (tb) {\n      case \"vector\":\n        if (a.length != b.length) {\n          error(\n            \"Error in sub(a,b): a.length = \" +\n              a.length +\n              \" != \" +\n              b.length +\n              \" = b.length.\"\n          );\n          return undefined;\n        }\n        return subspVectorVector(a, b);\n        break;\n      case \"spvector\":\n        if (a.length != b.length) {\n          error(\n            \"Error in sub(a,b): a.length = \" +\n              a.length +\n              \" != \" +\n              b.length +\n              \" = b.length.\"\n          );\n          return undefined;\n        }\n        return subspVectors(a, b);\n        break;\n      case \"matrix\":\n      case \"spmatrix\":\n      default:\n        error(\"Error in sub(a,B): a is a sparse vector and B is a \" + tb + \".\");\n        return undefined;\n        break;\n    }\n  } else if (ta == \"spmatrix\") {\n    switch (tb) {\n      case \"matrix\":\n        if (a.m != b.m || a.n != b.n) {\n          error(\n            \"Error in sub(A,B): size(A) = [\" +\n              a.m +\n              \",\" +\n              a.n +\n              \"] != [\" +\n              b.m +\n              \",\" +\n              b.n +\n              \"] = size(B).\"\n          );\n          return undefined;\n        }\n        return subspMatrixMatrix(a, b);\n        break;\n      case \"spmatrix\":\n        if (a.m != b.m || a.n != b.n) {\n          error(\n            \"Error in sub(A,B): size(A) = [\" +\n              a.m +\n              \",\" +\n              a.n +\n              \"] != [\" +\n              b.m +\n              \",\" +\n              b.n +\n              \"] = size(B).\"\n          );\n          return undefined;\n        }\n        return subspMatrices(a, b);\n        break;\n      case \"vector\":\n      case \"spvector\":\n      default:\n        error(\"Error in sub(A,b): a is a sparse matrix and B is a \" + tb + \".\");\n        return undefined;\n        break;\n    }\n  } else return undefined;\n}\n\nfunction mulScalarVector(scalar, vec) {\n  var i;\n  const n = vec.length;\n  var res = new Float64Array(vec);\n  for (i = 0; i < n; i++) res[i] *= scalar;\n  return res;\n}\n\nfunction subVectors(a, b) {\n  const n = a.length;\n  var c = new Float64Array(a);\n  for (var i = 0; i < n; i++) c[i] -= b[i];\n  return c;\n}\n\nfunction setVectorVector(A, rowsrange, B) {\n  var i;\n  for (i = 0; i < rowsrange.length; i++) A[rowsrange[i]] = B[i];\n}\n\nexport function min(a, b) {\n  var ta = type(a);\n\n  if (arguments.length == 1) {\n    switch (ta) {\n      case \"vector\":\n        return minVector(a);\n        break;\n      case \"spvector\":\n        var m = minVector(a.val);\n        if (m > 0 && a.val.length < a.length) return 0;\n        else return m;\n        break;\n      case \"matrix\":\n        return minMatrix(a);\n        break;\n      case \"spmatrix\":\n        var m = minVector(a.val);\n        if (m > 0 && a.val.length < a.m * a.n) return 0;\n        else return m;\n        break;\n      default:\n        return a;\n        break;\n    }\n  }\n\n  var tb = type(b);\n  if (ta == \"spvector\") {\n    a = fullVector(a);\n    ta = \"vector\";\n  }\n  if (ta == \"spmatrix\") {\n    a = fullMatrix(a);\n    ta = \"matrix\";\n  }\n  if (tb == \"spvector\") {\n    b = fullVector(b);\n    tb = \"vector\";\n  }\n  if (tb == \"spmatrix\") {\n    b = fullMatrix(b);\n    tb = \"matrix\";\n  }\n\n  if (ta == \"number\" && tb == \"number\") return Math.min(a, b);\n  else if (ta == \"number\") {\n    if (tb == \"vector\") return minVectorScalar(b, a);\n    else return minMatrixScalar(b, a);\n  } else if (tb == \"number\") {\n    if (ta == \"vector\") return minVectorScalar(a, b);\n    else {\n      // MAtrix , scalar\n      if (b == 1) return minMatrixRows(a);\n      // return row vector of min of columns\n      else if (b == 2) return minMatrixCols(a);\n      // return column vector of min of rows\n      else return minMatrixScalar(a, b);\n    }\n  } else if (ta == \"vector\") {\n    if (tb == \"vector\") return minVectorVector(a, b);\n    else return \"undefined\";\n  } else {\n    if (tb == \"matrix\") return minMatrixMatrix(a, b);\n    else return \"undefined\";\n  }\n}\n\nfunction minVector(a) {\n  const n = a.length;\n  var res = a[0];\n  for (var i = 1; i < n; i++) {\n    if (a[i] < res) res = a[i];\n  }\n  return res;\n}\n\nfunction subVectorScalar(vec, scalar) {\n  const n = vec.length;\n  var res = new Float64Array(vec);\n  for (var i = 0; i < n; i++) res[i] -= scalar;\n\n  return res;\n}\n\nexport function entrywisediv(a, b) {\n  var ta = type(a);\n  var tb = type(b);\n\n  switch (ta) {\n    case \"number\":\n      switch (tb) {\n        case \"number\":\n          return a / b;\n          break;\n        case \"vector\":\n          return divScalarVector(a, b);\n          break;\n        case \"matrix\":\n          return divScalarMatrix(a, b);\n          break;\n        case \"spvector\":\n          return divScalarspVector(a, b);\n          break;\n        case \"spmatrix\":\n          return divScalarspMatrix(a, b);\n          break;\n        default:\n          error(\n            \"Error in entrywisediv(a,b): b must be a number, a vector or a matrix.\"\n          );\n          return undefined;\n      }\n      break;\n    case \"vector\":\n      switch (tb) {\n        case \"number\":\n          return divVectorScalar(a, b);\n          break;\n        case \"vector\":\n          if (a.length != b.length) {\n            error(\n              \"Error in entrywisediv(a,b): a.length = \" +\n                a.length +\n                \" != \" +\n                b.length +\n                \" = b.length.\"\n            );\n            return undefined;\n          }\n          return divVectors(a, b);\n          break;\n        case \"spvector\":\n          error(\"Error in entrywisediv(a,b): b is a sparse vector with zeros.\");\n          break;\n        default:\n          error(\n            \"Error in entrywisediv(a,B): a is a vector and B is a \" + tb + \".\"\n          );\n          return undefined;\n      }\n      break;\n    case \"spvector\":\n      switch (tb) {\n        case \"number\":\n          return mulScalarspVector(1 / b, a);\n          break;\n        case \"vector\":\n          if (a.length != b.length) {\n            error(\n              \"Error in entrywisediv(a,b): a.length = \" +\n                a.length +\n                \" != \" +\n                b.length +\n                \" = b.length.\"\n            );\n            return undefined;\n          }\n          return divVectorspVector(a, b);\n          break;\n        case \"spvector\":\n          error(\"Error in entrywisediv(a,b): b is a sparse vector with zeros.\");\n          return undefined;\n          break;\n        default:\n          error(\n            \"Error in entrywisediv(a,B): a is a vector and B is a \" + tb + \".\"\n          );\n          return undefined;\n      }\n      break;\n    case \"matrix\":\n      switch (tb) {\n        case \"number\":\n          return divMatrixScalar(a, b);\n          break;\n        case \"matrix\":\n          if (a.m != b.m || a.n != b.n) {\n            error(\n              \"Error in entrywisediv(A,B): size(A) = [\" +\n                a.m +\n                \",\" +\n                a.n +\n                \"] != [\" +\n                b.m +\n                \",\" +\n                b.n +\n                \"] = size(B).\"\n            );\n            return undefined;\n          }\n          return divMatrices(a, b);\n          break;\n        case \"spmatrix\":\n          error(\"Error in entrywisediv(A,B): B is a sparse matrix with zeros.\");\n          return undefined;\n          break;\n        default:\n          error(\n            \"Error in entrywisediv(A,b): a is a matrix and B is a \" + tb + \".\"\n          );\n          return undefined;\n      }\n    case \"spmatrix\":\n      switch (tb) {\n        case \"number\":\n          return mulScalarspMatrix(1 / b, a);\n          break;\n        case \"matrix\":\n          if (a.m != b.m || a.n != b.n) {\n            error(\n              \"Error in entrywisediv(A,B): size(A) = [\" +\n                a.m +\n                \",\" +\n                a.n +\n                \"] != [\" +\n                b.m +\n                \",\" +\n                b.n +\n                \"] = size(B).\"\n            );\n            return undefined;\n          }\n          return divMatrixspMatrix(a, b);\n          break;\n        case \"spmatrix\":\n          error(\"Error in entrywisediv(A,B): B is a sparse matrix with zeros.\");\n          return undefined;\n          break;\n        default:\n          error(\n            \"Error in entrywisediv(A,b): a is a matrix and B is a \" + tb + \".\"\n          );\n          return undefined;\n      }\n      break;\n    default:\n      error(\n        \"Error in entrywisediv(a,b): a must be a number, a vector or a matrix.\"\n      );\n      return undefined;\n      break;\n  }\n}\n\nexport function sum(A, sumalongdimension) {\n  switch (type(A)) {\n    case \"vector\":\n      if (arguments.length == 1 || sumalongdimension == 1) {\n        return sumVector(A);\n      } else {\n        return vectorCopy(A);\n      }\n      break;\n    case \"spvector\":\n      if (arguments.length == 1 || sumalongdimension == 1)\n        return sumVector(A.val);\n      else return A.copy();\n      break;\n\n    case \"matrix\":\n      if (arguments.length == 1) {\n        return sumMatrix(A);\n      } else if (sumalongdimension == 1) {\n        return sumMatrixRows(A);\n      } else if (sumalongdimension == 2) {\n        return sumMatrixCols(A);\n      } else return undefined;\n      break;\n    case \"spmatrix\":\n      if (arguments.length == 1) {\n        return sumVector(A.val);\n      } else if (sumalongdimension == 1) {\n        return sumspMatrixRows(A);\n      } else if (sumalongdimension == 2) {\n        return sumspMatrixCols(A);\n      } else return undefined;\n      break;\n    default:\n      return A;\n      break;\n  }\n}\n\nfunction sumVector(a) {\n  var i;\n  const n = a.length;\n  var res = a[0];\n  for (i = 1; i < n; i++) res += a[i];\n  return res;\n}\n\nfunction divVectorScalar(a, b) {\n  var i;\n  const n = a.length;\n  var res = new Float64Array(a);\n  for (i = 0; i < n; i++) res[i] /= b;\n  return res;\n}\n\nfunction solveGaussianElimination(Aorig, borig) {\n  // Solve square linear system Ax = b with Gaussian elimination\n\n  var i;\n  var j;\n  var k;\n\n  var A = matrixCopy(Aorig).toArrayOfFloat64Array(); // useful to quickly switch rows\n  var b = vectorCopy(borig);\n\n  const m = Aorig.m;\n  const n = Aorig.n;\n  if (m != n) return undefined;\n\n  // Set to zero small values... ??\n\n  for (k = 0; k < m; k++) {\n    // Find imax = argmax_i=k...m |A_i,k|\n    var imax = k;\n    var Aimaxk = Math.abs(A[imax][k]);\n    for (i = k + 1; i < m; i++) {\n      var Aik = Math.abs(A[i][k]);\n      if (Aik > Aimaxk) {\n        imax = i;\n        Aimaxk = Aik;\n      }\n    }\n    if (isZero(Aimaxk)) {\n      console.log(\n        \"** Warning in solve(A,b), A is square but singular, switching from Gaussian elimination to QR method.\"\n      );\n      return solveWithQRcolumnpivoting(Aorig, borig);\n    }\n\n    if (imax != k) {\n      // Permute the rows\n      var a = A[k];\n      A[k] = A[imax];\n      A[imax] = a;\n      var tmpb = b[k];\n      b[k] = b[imax];\n      b[imax] = tmpb;\n    }\n    var Ak = A[k];\n\n    // Normalize row k\n    var Akk = Ak[k];\n    b[k] /= Akk;\n\n    //Ak[k] = 1; // not used afterwards\n    for (j = k + 1; j < n; j++) Ak[j] /= Akk;\n\n    if (Math.abs(Akk) < 1e-8) {\n      console.log(\n        \"** Warning in solveGaussianElimination: \" + Akk + \" \" + k + \":\" + m\n      );\n    }\n\n    // Substract the kth row from others to get 0s in kth column\n    var Aik;\n    var bk = b[k];\n    for (i = 0; i < m; i++) {\n      if (i != k) {\n        var Ai = A[i];\n        Aik = Ai[k];\n        for (j = k + 1; j < n; j++) {\n          // Aij = 0  with j < k and Aik = 0 after this operation but is never used\n          Ai[j] -= Aik * Ak[j];\n        }\n        b[i] -= Aik * bk;\n      }\n    }\n  }\n\n  // Solution:\n  return b;\n}\n\nfunction matrixCopy(A) {\n  var t = type(A);\n  switch (t) {\n    case \"vector\":\n      return vectorCopy(A);\n      break;\n    case \"ComplexVector\":\n      return new ComplexVector(A);\n      break;\n    case \"matrix\":\n      return new Matrix(A.m, A.n, A.val);\n      break;\n    case \"ComplexMatrix\":\n      return new ComplexMatrix(A);\n      break;\n    case \"Array\":\n      return arrayCopy(A);\n      break;\n    case \"spvector\":\n    case \"spmatrix\":\n      return A.copy();\n      break;\n    default:\n      error(\"Error in matrixCopy(A): A is not a matrix nor a vector.\");\n      return undefined;\n      break;\n  }\n}\n\nMatrix.prototype.toArrayOfFloat64Array = function () {\n  var A = new Array(this.m);\n  for (var i = 0; i < this.m; i++)\n    A[i] = this.val.subarray(i * this.n, (i + 1) * this.n);\n\n  return A;\n};\n"]},"metadata":{},"sourceType":"module"}